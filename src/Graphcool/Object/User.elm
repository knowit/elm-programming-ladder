-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Graphcool.Object.User exposing (SolutionsMetaOptionalArguments, SolutionsOptionalArguments, auth0UserId, createdAt, email, id, role, solutions, solutionsMeta_, updatedAt)

import Graphcool.Enum.SolutionOrderBy
import Graphcool.Enum.UserRole
import Graphcool.InputObject
import Graphcool.Interface
import Graphcool.Object
import Graphcool.Scalar
import Graphcool.ScalarCodecs
import Graphcool.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


auth0UserId : SelectionSet (Maybe String) Graphcool.Object.User
auth0UserId =
    Object.selectionForField "(Maybe String)" "auth0UserId" [] (Decode.string |> Decode.nullable)


createdAt : SelectionSet Graphcool.ScalarCodecs.DateTime Graphcool.Object.User
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


email : SelectionSet (Maybe String) Graphcool.Object.User
email =
    Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)


id : SelectionSet Graphcool.ScalarCodecs.Id Graphcool.Object.User
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapCodecs |> .codecId |> .decoder)


role : SelectionSet Graphcool.Enum.UserRole.UserRole Graphcool.Object.User
role =
    Object.selectionForField "Enum.UserRole.UserRole" "role" [] Graphcool.Enum.UserRole.decoder


type alias SolutionsOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.SolutionFilter
    , orderBy : OptionalArgument Graphcool.Enum.SolutionOrderBy.SolutionOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
solutions : (SolutionsOptionalArguments -> SolutionsOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.Solution -> SelectionSet (Maybe (List decodesTo)) Graphcool.Object.User
solutions fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeSolutionFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Graphcool.Enum.SolutionOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "solutions" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


updatedAt : SelectionSet Graphcool.ScalarCodecs.DateTime Graphcool.Object.User
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias SolutionsMetaOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.SolutionFilter
    , orderBy : OptionalArgument Graphcool.Enum.SolutionOrderBy.SolutionOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
solutionsMeta_ : (SolutionsMetaOptionalArguments -> SolutionsMetaOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.QueryMeta_ -> SelectionSet decodesTo Graphcool.Object.User
solutionsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeSolutionFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Graphcool.Enum.SolutionOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_solutionsMeta" optionalArgs object_ identity
