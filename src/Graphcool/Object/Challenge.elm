-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Graphcool.Object.Challenge exposing (SolutionsMetaOptionalArguments, SolutionsOptionalArguments, activeFrom, activeTo, answer, createdAt, discussionUrl, id, markdown, markup, published, solutions, solutionsMeta_, title, updatedAt)

import Graphcool.Enum.SolutionOrderBy
import Graphcool.InputObject
import Graphcool.Interface
import Graphcool.Object
import Graphcool.Scalar
import Graphcool.ScalarCodecs
import Graphcool.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


activeFrom : SelectionSet (Maybe Graphcool.ScalarCodecs.DateTime) Graphcool.Object.Challenge
activeFrom =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "activeFrom" [] (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


activeTo : SelectionSet (Maybe Graphcool.ScalarCodecs.DateTime) Graphcool.Object.Challenge
activeTo =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "activeTo" [] (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


answer : SelectionSet String Graphcool.Object.Challenge
answer =
    Object.selectionForField "String" "answer" [] Decode.string


createdAt : SelectionSet Graphcool.ScalarCodecs.DateTime Graphcool.Object.Challenge
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


discussionUrl : SelectionSet (Maybe String) Graphcool.Object.Challenge
discussionUrl =
    Object.selectionForField "(Maybe String)" "discussionUrl" [] (Decode.string |> Decode.nullable)


id : SelectionSet Graphcool.ScalarCodecs.Id Graphcool.Object.Challenge
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapCodecs |> .codecId |> .decoder)


markdown : SelectionSet String Graphcool.Object.Challenge
markdown =
    Object.selectionForField "String" "markdown" [] Decode.string


markup : SelectionSet String Graphcool.Object.Challenge
markup =
    Object.selectionForField "String" "markup" [] Decode.string


published : SelectionSet Bool Graphcool.Object.Challenge
published =
    Object.selectionForField "Bool" "published" [] Decode.bool


type alias SolutionsOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.SolutionFilter
    , orderBy : OptionalArgument Graphcool.Enum.SolutionOrderBy.SolutionOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
solutions : (SolutionsOptionalArguments -> SolutionsOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.Solution -> SelectionSet (Maybe (List decodesTo)) Graphcool.Object.Challenge
solutions fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeSolutionFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Graphcool.Enum.SolutionOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "solutions" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


title : SelectionSet String Graphcool.Object.Challenge
title =
    Object.selectionForField "String" "title" [] Decode.string


updatedAt : SelectionSet Graphcool.ScalarCodecs.DateTime Graphcool.Object.Challenge
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias SolutionsMetaOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.SolutionFilter
    , orderBy : OptionalArgument Graphcool.Enum.SolutionOrderBy.SolutionOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Meta information about the query.

  - filter -

-}
solutionsMeta_ : (SolutionsMetaOptionalArguments -> SolutionsMetaOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.QueryMeta_ -> SelectionSet decodesTo Graphcool.Object.Challenge
solutionsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeSolutionFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Graphcool.Enum.SolutionOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_solutionsMeta" optionalArgs object_ identity
