-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Graphcool.Object.Solution exposing (ChallengeOptionalArguments, UserOptionalArguments, attempts, challenge, createdAt, id, solved, updatedAt, user)

import Graphcool.InputObject
import Graphcool.Interface
import Graphcool.Object
import Graphcool.Scalar
import Graphcool.ScalarCodecs
import Graphcool.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


attempts : SelectionSet (Maybe Int) Graphcool.Object.Solution
attempts =
    Object.selectionForField "(Maybe Int)" "attempts" [] (Decode.int |> Decode.nullable)


type alias ChallengeOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.ChallengeFilter }


{-|

  - filter -

-}
challenge : (ChallengeOptionalArguments -> ChallengeOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.Challenge -> SelectionSet decodesTo Graphcool.Object.Solution
challenge fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeChallengeFilter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "challenge" optionalArgs object_ identity


createdAt : SelectionSet Graphcool.ScalarCodecs.DateTime Graphcool.Object.Solution
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


id : SelectionSet Graphcool.ScalarCodecs.Id Graphcool.Object.Solution
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapCodecs |> .codecId |> .decoder)


solved : SelectionSet Bool Graphcool.Object.Solution
solved =
    Object.selectionForField "Bool" "solved" [] Decode.bool


updatedAt : SelectionSet Graphcool.ScalarCodecs.DateTime Graphcool.Object.Solution
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias UserOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.UserFilter }


{-|

  - filter -

-}
user : (UserOptionalArguments -> UserOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.User -> SelectionSet decodesTo Graphcool.Object.Solution
user fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeUserFilter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "user" optionalArgs object_ identity
