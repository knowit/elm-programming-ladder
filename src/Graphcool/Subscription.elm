-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Graphcool.Subscription exposing (ChallengeOptionalArguments, SolutionOptionalArguments, UserOptionalArguments, challenge, solution, user)

import Graphcool.InputObject
import Graphcool.Interface
import Graphcool.Object
import Graphcool.Scalar
import Graphcool.ScalarCodecs
import Graphcool.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias ChallengeOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.ChallengeSubscriptionFilter }


{-|

  - filter -

-}
challenge : (ChallengeOptionalArguments -> ChallengeOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.ChallengeSubscriptionPayload -> SelectionSet (Maybe decodesTo) RootSubscription
challenge fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeChallengeSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Challenge" optionalArgs object_ (identity >> Decode.nullable)


type alias SolutionOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.SolutionSubscriptionFilter }


{-|

  - filter -

-}
solution : (SolutionOptionalArguments -> SolutionOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.SolutionSubscriptionPayload -> SelectionSet (Maybe decodesTo) RootSubscription
solution fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeSolutionSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Solution" optionalArgs object_ (identity >> Decode.nullable)


type alias UserOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.UserSubscriptionFilter }


{-|

  - filter -

-}
user : (UserOptionalArguments -> UserOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.UserSubscriptionPayload -> SelectionSet (Maybe decodesTo) RootSubscription
user fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeUserSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "User" optionalArgs object_ (identity >> Decode.nullable)
