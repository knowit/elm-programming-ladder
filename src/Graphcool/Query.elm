-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Graphcool.Query exposing (AllChallengesMetaOptionalArguments, AllChallengesOptionalArguments, AllSolutionsMetaOptionalArguments, AllSolutionsOptionalArguments, AllUsersMetaOptionalArguments, AllUsersOptionalArguments, ChallengeOptionalArguments, GetAnswerRequiredArguments, NodeRequiredArguments, SolutionOptionalArguments, UserOptionalArguments, allChallenges, allChallengesMeta_, allSolutions, allSolutionsMeta_, allUsers, allUsersMeta_, challenge, getAnswer, loggedInUser, node, solution, user)

import Graphcool.Enum.ChallengeOrderBy
import Graphcool.Enum.SolutionOrderBy
import Graphcool.Enum.UserOrderBy
import Graphcool.InputObject
import Graphcool.Interface
import Graphcool.Object
import Graphcool.Scalar
import Graphcool.ScalarCodecs
import Graphcool.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias AllChallengesOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.ChallengeFilter
    , orderBy : OptionalArgument Graphcool.Enum.ChallengeOrderBy.ChallengeOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allChallenges : (AllChallengesOptionalArguments -> AllChallengesOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.Challenge -> SelectionSet (List decodesTo) RootQuery
allChallenges fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeChallengeFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Graphcool.Enum.ChallengeOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allChallenges" optionalArgs object_ (identity >> Decode.list)


type alias AllSolutionsOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.SolutionFilter
    , orderBy : OptionalArgument Graphcool.Enum.SolutionOrderBy.SolutionOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allSolutions : (AllSolutionsOptionalArguments -> AllSolutionsOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.Solution -> SelectionSet (List decodesTo) RootQuery
allSolutions fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeSolutionFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Graphcool.Enum.SolutionOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allSolutions" optionalArgs object_ (identity >> Decode.list)


type alias AllUsersOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.UserFilter
    , orderBy : OptionalArgument Graphcool.Enum.UserOrderBy.UserOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allUsers : (AllUsersOptionalArguments -> AllUsersOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.User -> SelectionSet (List decodesTo) RootQuery
allUsers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeUserFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Graphcool.Enum.UserOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allUsers" optionalArgs object_ (identity >> Decode.list)


type alias AllChallengesMetaOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.ChallengeFilter
    , orderBy : OptionalArgument Graphcool.Enum.ChallengeOrderBy.ChallengeOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allChallengesMeta_ : (AllChallengesMetaOptionalArguments -> AllChallengesMetaOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.QueryMeta_ -> SelectionSet decodesTo RootQuery
allChallengesMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeChallengeFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Graphcool.Enum.ChallengeOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_allChallengesMeta" optionalArgs object_ identity


type alias AllSolutionsMetaOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.SolutionFilter
    , orderBy : OptionalArgument Graphcool.Enum.SolutionOrderBy.SolutionOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allSolutionsMeta_ : (AllSolutionsMetaOptionalArguments -> AllSolutionsMetaOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.QueryMeta_ -> SelectionSet decodesTo RootQuery
allSolutionsMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeSolutionFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Graphcool.Enum.SolutionOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_allSolutionsMeta" optionalArgs object_ identity


type alias AllUsersMetaOptionalArguments =
    { filter : OptionalArgument Graphcool.InputObject.UserFilter
    , orderBy : OptionalArgument Graphcool.Enum.UserOrderBy.UserOrderBy
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - filter -

-}
allUsersMeta_ : (AllUsersMetaOptionalArguments -> AllUsersMetaOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.QueryMeta_ -> SelectionSet decodesTo RootQuery
allUsersMeta_ fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Graphcool.InputObject.encodeUserFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Graphcool.Enum.UserOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "_allUsersMeta" optionalArgs object_ identity


type alias ChallengeOptionalArguments =
    { id : OptionalArgument Graphcool.ScalarCodecs.Id }


{-|

  - id -

-}
challenge : (ChallengeOptionalArguments -> ChallengeOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.Challenge -> SelectionSet (Maybe decodesTo) RootQuery
challenge fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Challenge" optionalArgs object_ (identity >> Decode.nullable)


type alias SolutionOptionalArguments =
    { id : OptionalArgument Graphcool.ScalarCodecs.Id }


{-|

  - id -

-}
solution : (SolutionOptionalArguments -> SolutionOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.Solution -> SelectionSet (Maybe decodesTo) RootQuery
solution fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "Solution" optionalArgs object_ (identity >> Decode.nullable)


type alias UserOptionalArguments =
    { auth0UserId : OptionalArgument String
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    }


{-|

  - auth0UserId -
  - id -

-}
user : (UserOptionalArguments -> UserOptionalArguments) -> SelectionSet decodesTo Graphcool.Object.User -> SelectionSet (Maybe decodesTo) RootQuery
user fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { auth0UserId = Absent, id = Absent }

        optionalArgs =
            [ Argument.optional "auth0UserId" filledInOptionals.auth0UserId Encode.string, Argument.optional "id" filledInOptionals.id (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "User" optionalArgs object_ (identity >> Decode.nullable)


type alias GetAnswerRequiredArguments =
    { challengeId : Graphcool.ScalarCodecs.Id }


{-| getAnswer
-}
getAnswer : GetAnswerRequiredArguments -> SelectionSet decodesTo Graphcool.Object.GetAnswerPayload -> SelectionSet decodesTo RootQuery
getAnswer requiredArgs object_ =
    Object.selectionForCompositeField "getAnswer" [ Argument.required "challengeId" requiredArgs.challengeId (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) ] object_ identity


{-| loggedInUser
-}
loggedInUser : SelectionSet decodesTo Graphcool.Object.LoggedInUserPayload -> SelectionSet (Maybe decodesTo) RootQuery
loggedInUser object_ =
    Object.selectionForCompositeField "loggedInUser" [] object_ (identity >> Decode.nullable)


user_ : SelectionSet decodesTo Graphcool.Object.User -> SelectionSet (Maybe decodesTo) RootQuery
user_ object_ =
    Object.selectionForCompositeField "user" [] object_ (identity >> Decode.nullable)


type alias NodeRequiredArguments =
    { id : Graphcool.ScalarCodecs.Id }


{-| Fetches an object given its ID

  - id - The ID of an object

-}
node : NodeRequiredArguments -> SelectionSet decodesTo Graphcool.Interface.Node -> SelectionSet (Maybe decodesTo) RootQuery
node requiredArgs object_ =
    Object.selectionForCompositeField "node" [ Argument.required "id" requiredArgs.id (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)
