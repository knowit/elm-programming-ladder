-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Graphcool.InputObject exposing (ChallengeFilter(..), ChallengeFilterOptionalFields, ChallengeFilterRaw, ChallengeSubscriptionFilter(..), ChallengeSubscriptionFilterNode(..), ChallengeSubscriptionFilterNodeOptionalFields, ChallengeSubscriptionFilterNodeRaw, ChallengeSubscriptionFilterOptionalFields, ChallengeSubscriptionFilterRaw, ChallengesolutionsSolution(..), ChallengesolutionsSolutionOptionalFields, ChallengesolutionsSolutionRaw, ChallengesolutionsSolutionRequiredFields, CreateChallenge(..), CreateChallengeOptionalFields, CreateChallengeRaw, CreateChallengeRequiredFields, CreateSolution(..), CreateSolutionOptionalFields, CreateSolutionRaw, CreateSolutionRequiredFields, CreateUser(..), CreateUserOptionalFields, CreateUserRaw, InvokeFunctionInput, InvokeFunctionInputOptionalFields, InvokeFunctionInputRequiredFields, SolutionFilter(..), SolutionFilterOptionalFields, SolutionFilterRaw, SolutionSubscriptionFilter(..), SolutionSubscriptionFilterNode(..), SolutionSubscriptionFilterNodeOptionalFields, SolutionSubscriptionFilterNodeRaw, SolutionSubscriptionFilterOptionalFields, SolutionSubscriptionFilterRaw, SolutionchallengeChallenge(..), SolutionchallengeChallengeOptionalFields, SolutionchallengeChallengeRaw, SolutionchallengeChallengeRequiredFields, SolutionuserUser(..), SolutionuserUserOptionalFields, SolutionuserUserRaw, UpdateChallenge(..), UpdateChallengeOptionalFields, UpdateChallengeRaw, UpdateChallengeRequiredFields, UpdateSolution(..), UpdateSolutionOptionalFields, UpdateSolutionRaw, UpdateSolutionRequiredFields, UpdateUser(..), UpdateUserOptionalFields, UpdateUserRaw, UpdateUserRequiredFields, UserFilter(..), UserFilterOptionalFields, UserFilterRaw, UserSubscriptionFilter(..), UserSubscriptionFilterNode(..), UserSubscriptionFilterNodeOptionalFields, UserSubscriptionFilterNodeRaw, UserSubscriptionFilterOptionalFields, UserSubscriptionFilterRaw, UsersolutionsSolution(..), UsersolutionsSolutionOptionalFields, UsersolutionsSolutionRaw, UsersolutionsSolutionRequiredFields, buildChallengeFilter, buildChallengeSubscriptionFilter, buildChallengeSubscriptionFilterNode, buildChallengesolutionsSolution, buildCreateChallenge, buildCreateSolution, buildCreateUser, buildInvokeFunctionInput, buildSolutionFilter, buildSolutionSubscriptionFilter, buildSolutionSubscriptionFilterNode, buildSolutionchallengeChallenge, buildSolutionuserUser, buildUpdateChallenge, buildUpdateSolution, buildUpdateUser, buildUserFilter, buildUserSubscriptionFilter, buildUserSubscriptionFilterNode, buildUsersolutionsSolution, encodeChallengeFilter, encodeChallengeSubscriptionFilter, encodeChallengeSubscriptionFilterNode, encodeChallengesolutionsSolution, encodeCreateChallenge, encodeCreateSolution, encodeCreateUser, encodeInvokeFunctionInput, encodeSolutionFilter, encodeSolutionSubscriptionFilter, encodeSolutionSubscriptionFilterNode, encodeSolutionchallengeChallenge, encodeSolutionuserUser, encodeUpdateChallenge, encodeUpdateSolution, encodeUpdateUser, encodeUserFilter, encodeUserSubscriptionFilter, encodeUserSubscriptionFilterNode, encodeUsersolutionsSolution)

import Graphcool.Enum.ModelMutationType_
import Graphcool.Enum.UserRole
import Graphcool.Interface
import Graphcool.Object
import Graphcool.Scalar
import Graphcool.ScalarCodecs
import Graphcool.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildChallengeFilter : (ChallengeFilterOptionalFields -> ChallengeFilterOptionalFields) -> ChallengeFilter
buildChallengeFilter fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, activeFrom = Absent, activeFrom_not = Absent, activeFrom_in = Absent, activeFrom_not_in = Absent, activeFrom_lt = Absent, activeFrom_lte = Absent, activeFrom_gt = Absent, activeFrom_gte = Absent, activeTo = Absent, activeTo_not = Absent, activeTo_in = Absent, activeTo_not_in = Absent, activeTo_lt = Absent, activeTo_lte = Absent, activeTo_gt = Absent, activeTo_gte = Absent, answer = Absent, answer_not = Absent, answer_in = Absent, answer_not_in = Absent, answer_lt = Absent, answer_lte = Absent, answer_gt = Absent, answer_gte = Absent, answer_contains = Absent, answer_not_contains = Absent, answer_starts_with = Absent, answer_not_starts_with = Absent, answer_ends_with = Absent, answer_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, discussionUrl = Absent, discussionUrl_not = Absent, discussionUrl_in = Absent, discussionUrl_not_in = Absent, discussionUrl_lt = Absent, discussionUrl_lte = Absent, discussionUrl_gt = Absent, discussionUrl_gte = Absent, discussionUrl_contains = Absent, discussionUrl_not_contains = Absent, discussionUrl_starts_with = Absent, discussionUrl_not_starts_with = Absent, discussionUrl_ends_with = Absent, discussionUrl_not_ends_with = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, markdown = Absent, markdown_not = Absent, markdown_in = Absent, markdown_not_in = Absent, markdown_lt = Absent, markdown_lte = Absent, markdown_gt = Absent, markdown_gte = Absent, markdown_contains = Absent, markdown_not_contains = Absent, markdown_starts_with = Absent, markdown_not_starts_with = Absent, markdown_ends_with = Absent, markdown_not_ends_with = Absent, markup = Absent, markup_not = Absent, markup_in = Absent, markup_not_in = Absent, markup_lt = Absent, markup_lte = Absent, markup_gt = Absent, markup_gte = Absent, markup_contains = Absent, markup_not_contains = Absent, markup_starts_with = Absent, markup_not_starts_with = Absent, markup_ends_with = Absent, markup_not_ends_with = Absent, notes = Absent, notes_not = Absent, notes_in = Absent, notes_not_in = Absent, notes_lt = Absent, notes_lte = Absent, notes_gt = Absent, notes_gte = Absent, notes_contains = Absent, notes_not_contains = Absent, notes_starts_with = Absent, notes_not_starts_with = Absent, notes_ends_with = Absent, notes_not_ends_with = Absent, published = Absent, published_not = Absent, title = Absent, title_not = Absent, title_in = Absent, title_not_in = Absent, title_lt = Absent, title_lte = Absent, title_gt = Absent, title_gte = Absent, title_contains = Absent, title_not_contains = Absent, title_starts_with = Absent, title_not_starts_with = Absent, title_ends_with = Absent, title_not_ends_with = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, solutions_every = Absent, solutions_some = Absent, solutions_none = Absent }
    in
    ChallengeFilter { and = optionals.and, or = optionals.or, activeFrom = optionals.activeFrom, activeFrom_not = optionals.activeFrom_not, activeFrom_in = optionals.activeFrom_in, activeFrom_not_in = optionals.activeFrom_not_in, activeFrom_lt = optionals.activeFrom_lt, activeFrom_lte = optionals.activeFrom_lte, activeFrom_gt = optionals.activeFrom_gt, activeFrom_gte = optionals.activeFrom_gte, activeTo = optionals.activeTo, activeTo_not = optionals.activeTo_not, activeTo_in = optionals.activeTo_in, activeTo_not_in = optionals.activeTo_not_in, activeTo_lt = optionals.activeTo_lt, activeTo_lte = optionals.activeTo_lte, activeTo_gt = optionals.activeTo_gt, activeTo_gte = optionals.activeTo_gte, answer = optionals.answer, answer_not = optionals.answer_not, answer_in = optionals.answer_in, answer_not_in = optionals.answer_not_in, answer_lt = optionals.answer_lt, answer_lte = optionals.answer_lte, answer_gt = optionals.answer_gt, answer_gte = optionals.answer_gte, answer_contains = optionals.answer_contains, answer_not_contains = optionals.answer_not_contains, answer_starts_with = optionals.answer_starts_with, answer_not_starts_with = optionals.answer_not_starts_with, answer_ends_with = optionals.answer_ends_with, answer_not_ends_with = optionals.answer_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, discussionUrl = optionals.discussionUrl, discussionUrl_not = optionals.discussionUrl_not, discussionUrl_in = optionals.discussionUrl_in, discussionUrl_not_in = optionals.discussionUrl_not_in, discussionUrl_lt = optionals.discussionUrl_lt, discussionUrl_lte = optionals.discussionUrl_lte, discussionUrl_gt = optionals.discussionUrl_gt, discussionUrl_gte = optionals.discussionUrl_gte, discussionUrl_contains = optionals.discussionUrl_contains, discussionUrl_not_contains = optionals.discussionUrl_not_contains, discussionUrl_starts_with = optionals.discussionUrl_starts_with, discussionUrl_not_starts_with = optionals.discussionUrl_not_starts_with, discussionUrl_ends_with = optionals.discussionUrl_ends_with, discussionUrl_not_ends_with = optionals.discussionUrl_not_ends_with, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, markdown = optionals.markdown, markdown_not = optionals.markdown_not, markdown_in = optionals.markdown_in, markdown_not_in = optionals.markdown_not_in, markdown_lt = optionals.markdown_lt, markdown_lte = optionals.markdown_lte, markdown_gt = optionals.markdown_gt, markdown_gte = optionals.markdown_gte, markdown_contains = optionals.markdown_contains, markdown_not_contains = optionals.markdown_not_contains, markdown_starts_with = optionals.markdown_starts_with, markdown_not_starts_with = optionals.markdown_not_starts_with, markdown_ends_with = optionals.markdown_ends_with, markdown_not_ends_with = optionals.markdown_not_ends_with, markup = optionals.markup, markup_not = optionals.markup_not, markup_in = optionals.markup_in, markup_not_in = optionals.markup_not_in, markup_lt = optionals.markup_lt, markup_lte = optionals.markup_lte, markup_gt = optionals.markup_gt, markup_gte = optionals.markup_gte, markup_contains = optionals.markup_contains, markup_not_contains = optionals.markup_not_contains, markup_starts_with = optionals.markup_starts_with, markup_not_starts_with = optionals.markup_not_starts_with, markup_ends_with = optionals.markup_ends_with, markup_not_ends_with = optionals.markup_not_ends_with, notes = optionals.notes, notes_not = optionals.notes_not, notes_in = optionals.notes_in, notes_not_in = optionals.notes_not_in, notes_lt = optionals.notes_lt, notes_lte = optionals.notes_lte, notes_gt = optionals.notes_gt, notes_gte = optionals.notes_gte, notes_contains = optionals.notes_contains, notes_not_contains = optionals.notes_not_contains, notes_starts_with = optionals.notes_starts_with, notes_not_starts_with = optionals.notes_not_starts_with, notes_ends_with = optionals.notes_ends_with, notes_not_ends_with = optionals.notes_not_ends_with, published = optionals.published, published_not = optionals.published_not, title = optionals.title, title_not = optionals.title_not, title_in = optionals.title_in, title_not_in = optionals.title_not_in, title_lt = optionals.title_lt, title_lte = optionals.title_lte, title_gt = optionals.title_gt, title_gte = optionals.title_gte, title_contains = optionals.title_contains, title_not_contains = optionals.title_not_contains, title_starts_with = optionals.title_starts_with, title_not_starts_with = optionals.title_not_starts_with, title_ends_with = optionals.title_ends_with, title_not_ends_with = optionals.title_not_ends_with, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, solutions_every = optionals.solutions_every, solutions_some = optionals.solutions_some, solutions_none = optionals.solutions_none }


type alias ChallengeFilterOptionalFields =
    { and : OptionalArgument (List ChallengeFilter)
    , or : OptionalArgument (List ChallengeFilter)
    , activeFrom : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeFrom_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeFrom_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeTo_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeTo_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , answer : OptionalArgument String
    , answer_not : OptionalArgument String
    , answer_in : OptionalArgument (List String)
    , answer_not_in : OptionalArgument (List String)
    , answer_lt : OptionalArgument String
    , answer_lte : OptionalArgument String
    , answer_gt : OptionalArgument String
    , answer_gte : OptionalArgument String
    , answer_contains : OptionalArgument String
    , answer_not_contains : OptionalArgument String
    , answer_starts_with : OptionalArgument String
    , answer_not_starts_with : OptionalArgument String
    , answer_ends_with : OptionalArgument String
    , answer_not_ends_with : OptionalArgument String
    , createdAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , discussionUrl : OptionalArgument String
    , discussionUrl_not : OptionalArgument String
    , discussionUrl_in : OptionalArgument (List String)
    , discussionUrl_not_in : OptionalArgument (List String)
    , discussionUrl_lt : OptionalArgument String
    , discussionUrl_lte : OptionalArgument String
    , discussionUrl_gt : OptionalArgument String
    , discussionUrl_gte : OptionalArgument String
    , discussionUrl_contains : OptionalArgument String
    , discussionUrl_not_contains : OptionalArgument String
    , discussionUrl_starts_with : OptionalArgument String
    , discussionUrl_not_starts_with : OptionalArgument String
    , discussionUrl_ends_with : OptionalArgument String
    , discussionUrl_not_ends_with : OptionalArgument String
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_not_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_lt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_lte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , markdown : OptionalArgument String
    , markdown_not : OptionalArgument String
    , markdown_in : OptionalArgument (List String)
    , markdown_not_in : OptionalArgument (List String)
    , markdown_lt : OptionalArgument String
    , markdown_lte : OptionalArgument String
    , markdown_gt : OptionalArgument String
    , markdown_gte : OptionalArgument String
    , markdown_contains : OptionalArgument String
    , markdown_not_contains : OptionalArgument String
    , markdown_starts_with : OptionalArgument String
    , markdown_not_starts_with : OptionalArgument String
    , markdown_ends_with : OptionalArgument String
    , markdown_not_ends_with : OptionalArgument String
    , markup : OptionalArgument String
    , markup_not : OptionalArgument String
    , markup_in : OptionalArgument (List String)
    , markup_not_in : OptionalArgument (List String)
    , markup_lt : OptionalArgument String
    , markup_lte : OptionalArgument String
    , markup_gt : OptionalArgument String
    , markup_gte : OptionalArgument String
    , markup_contains : OptionalArgument String
    , markup_not_contains : OptionalArgument String
    , markup_starts_with : OptionalArgument String
    , markup_not_starts_with : OptionalArgument String
    , markup_ends_with : OptionalArgument String
    , markup_not_ends_with : OptionalArgument String
    , notes : OptionalArgument String
    , notes_not : OptionalArgument String
    , notes_in : OptionalArgument (List String)
    , notes_not_in : OptionalArgument (List String)
    , notes_lt : OptionalArgument String
    , notes_lte : OptionalArgument String
    , notes_gt : OptionalArgument String
    , notes_gte : OptionalArgument String
    , notes_contains : OptionalArgument String
    , notes_not_contains : OptionalArgument String
    , notes_starts_with : OptionalArgument String
    , notes_not_starts_with : OptionalArgument String
    , notes_ends_with : OptionalArgument String
    , notes_not_ends_with : OptionalArgument String
    , published : OptionalArgument Bool
    , published_not : OptionalArgument Bool
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , updatedAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , solutions_every : OptionalArgument SolutionFilter
    , solutions_some : OptionalArgument SolutionFilter
    , solutions_none : OptionalArgument SolutionFilter
    }


{-| Type alias for the `ChallengeFilter` attributes. Note that this type
needs to use the `ChallengeFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ChallengeFilterRaw =
    { and : OptionalArgument (List ChallengeFilter)
    , or : OptionalArgument (List ChallengeFilter)
    , activeFrom : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeFrom_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeFrom_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeTo_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeTo_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , answer : OptionalArgument String
    , answer_not : OptionalArgument String
    , answer_in : OptionalArgument (List String)
    , answer_not_in : OptionalArgument (List String)
    , answer_lt : OptionalArgument String
    , answer_lte : OptionalArgument String
    , answer_gt : OptionalArgument String
    , answer_gte : OptionalArgument String
    , answer_contains : OptionalArgument String
    , answer_not_contains : OptionalArgument String
    , answer_starts_with : OptionalArgument String
    , answer_not_starts_with : OptionalArgument String
    , answer_ends_with : OptionalArgument String
    , answer_not_ends_with : OptionalArgument String
    , createdAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , discussionUrl : OptionalArgument String
    , discussionUrl_not : OptionalArgument String
    , discussionUrl_in : OptionalArgument (List String)
    , discussionUrl_not_in : OptionalArgument (List String)
    , discussionUrl_lt : OptionalArgument String
    , discussionUrl_lte : OptionalArgument String
    , discussionUrl_gt : OptionalArgument String
    , discussionUrl_gte : OptionalArgument String
    , discussionUrl_contains : OptionalArgument String
    , discussionUrl_not_contains : OptionalArgument String
    , discussionUrl_starts_with : OptionalArgument String
    , discussionUrl_not_starts_with : OptionalArgument String
    , discussionUrl_ends_with : OptionalArgument String
    , discussionUrl_not_ends_with : OptionalArgument String
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_not_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_lt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_lte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , markdown : OptionalArgument String
    , markdown_not : OptionalArgument String
    , markdown_in : OptionalArgument (List String)
    , markdown_not_in : OptionalArgument (List String)
    , markdown_lt : OptionalArgument String
    , markdown_lte : OptionalArgument String
    , markdown_gt : OptionalArgument String
    , markdown_gte : OptionalArgument String
    , markdown_contains : OptionalArgument String
    , markdown_not_contains : OptionalArgument String
    , markdown_starts_with : OptionalArgument String
    , markdown_not_starts_with : OptionalArgument String
    , markdown_ends_with : OptionalArgument String
    , markdown_not_ends_with : OptionalArgument String
    , markup : OptionalArgument String
    , markup_not : OptionalArgument String
    , markup_in : OptionalArgument (List String)
    , markup_not_in : OptionalArgument (List String)
    , markup_lt : OptionalArgument String
    , markup_lte : OptionalArgument String
    , markup_gt : OptionalArgument String
    , markup_gte : OptionalArgument String
    , markup_contains : OptionalArgument String
    , markup_not_contains : OptionalArgument String
    , markup_starts_with : OptionalArgument String
    , markup_not_starts_with : OptionalArgument String
    , markup_ends_with : OptionalArgument String
    , markup_not_ends_with : OptionalArgument String
    , notes : OptionalArgument String
    , notes_not : OptionalArgument String
    , notes_in : OptionalArgument (List String)
    , notes_not_in : OptionalArgument (List String)
    , notes_lt : OptionalArgument String
    , notes_lte : OptionalArgument String
    , notes_gt : OptionalArgument String
    , notes_gte : OptionalArgument String
    , notes_contains : OptionalArgument String
    , notes_not_contains : OptionalArgument String
    , notes_starts_with : OptionalArgument String
    , notes_not_starts_with : OptionalArgument String
    , notes_ends_with : OptionalArgument String
    , notes_not_ends_with : OptionalArgument String
    , published : OptionalArgument Bool
    , published_not : OptionalArgument Bool
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , updatedAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , solutions_every : OptionalArgument SolutionFilter
    , solutions_some : OptionalArgument SolutionFilter
    , solutions_none : OptionalArgument SolutionFilter
    }


{-| Type for the ChallengeFilter input object.
-}
type ChallengeFilter
    = ChallengeFilter ChallengeFilterRaw


{-| Encode a ChallengeFilter into a value that can be used as an argument.
-}
encodeChallengeFilter : ChallengeFilter -> Value
encodeChallengeFilter (ChallengeFilter input) =
    Encode.maybeObject
        [ ( "AND", (encodeChallengeFilter |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeChallengeFilter |> Encode.list) |> Encode.optional input.or ), ( "activeFrom", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom ), ( "activeFrom_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom_not ), ( "activeFrom_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.activeFrom_in ), ( "activeFrom_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.activeFrom_not_in ), ( "activeFrom_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom_lt ), ( "activeFrom_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom_lte ), ( "activeFrom_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom_gt ), ( "activeFrom_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom_gte ), ( "activeTo", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo ), ( "activeTo_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo_not ), ( "activeTo_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.activeTo_in ), ( "activeTo_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.activeTo_not_in ), ( "activeTo_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo_lt ), ( "activeTo_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo_lte ), ( "activeTo_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo_gt ), ( "activeTo_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo_gte ), ( "answer", Encode.string |> Encode.optional input.answer ), ( "answer_not", Encode.string |> Encode.optional input.answer_not ), ( "answer_in", (Encode.string |> Encode.list) |> Encode.optional input.answer_in ), ( "answer_not_in", (Encode.string |> Encode.list) |> Encode.optional input.answer_not_in ), ( "answer_lt", Encode.string |> Encode.optional input.answer_lt ), ( "answer_lte", Encode.string |> Encode.optional input.answer_lte ), ( "answer_gt", Encode.string |> Encode.optional input.answer_gt ), ( "answer_gte", Encode.string |> Encode.optional input.answer_gte ), ( "answer_contains", Encode.string |> Encode.optional input.answer_contains ), ( "answer_not_contains", Encode.string |> Encode.optional input.answer_not_contains ), ( "answer_starts_with", Encode.string |> Encode.optional input.answer_starts_with ), ( "answer_not_starts_with", Encode.string |> Encode.optional input.answer_not_starts_with ), ( "answer_ends_with", Encode.string |> Encode.optional input.answer_ends_with ), ( "answer_not_ends_with", Encode.string |> Encode.optional input.answer_not_ends_with ), ( "createdAt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt ), ( "createdAt_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_gte ), ( "discussionUrl", Encode.string |> Encode.optional input.discussionUrl ), ( "discussionUrl_not", Encode.string |> Encode.optional input.discussionUrl_not ), ( "discussionUrl_in", (Encode.string |> Encode.list) |> Encode.optional input.discussionUrl_in ), ( "discussionUrl_not_in", (Encode.string |> Encode.list) |> Encode.optional input.discussionUrl_not_in ), ( "discussionUrl_lt", Encode.string |> Encode.optional input.discussionUrl_lt ), ( "discussionUrl_lte", Encode.string |> Encode.optional input.discussionUrl_lte ), ( "discussionUrl_gt", Encode.string |> Encode.optional input.discussionUrl_gt ), ( "discussionUrl_gte", Encode.string |> Encode.optional input.discussionUrl_gte ), ( "discussionUrl_contains", Encode.string |> Encode.optional input.discussionUrl_contains ), ( "discussionUrl_not_contains", Encode.string |> Encode.optional input.discussionUrl_not_contains ), ( "discussionUrl_starts_with", Encode.string |> Encode.optional input.discussionUrl_starts_with ), ( "discussionUrl_not_starts_with", Encode.string |> Encode.optional input.discussionUrl_not_starts_with ), ( "discussionUrl_ends_with", Encode.string |> Encode.optional input.discussionUrl_ends_with ), ( "discussionUrl_not_ends_with", Encode.string |> Encode.optional input.discussionUrl_not_ends_with ), ( "id", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "id_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not ), ( "id_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_lt ), ( "id_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_lte ), ( "id_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_gt ), ( "id_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_gte ), ( "id_contains", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_contains ), ( "id_not_contains", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_ends_with ), ( "markdown", Encode.string |> Encode.optional input.markdown ), ( "markdown_not", Encode.string |> Encode.optional input.markdown_not ), ( "markdown_in", (Encode.string |> Encode.list) |> Encode.optional input.markdown_in ), ( "markdown_not_in", (Encode.string |> Encode.list) |> Encode.optional input.markdown_not_in ), ( "markdown_lt", Encode.string |> Encode.optional input.markdown_lt ), ( "markdown_lte", Encode.string |> Encode.optional input.markdown_lte ), ( "markdown_gt", Encode.string |> Encode.optional input.markdown_gt ), ( "markdown_gte", Encode.string |> Encode.optional input.markdown_gte ), ( "markdown_contains", Encode.string |> Encode.optional input.markdown_contains ), ( "markdown_not_contains", Encode.string |> Encode.optional input.markdown_not_contains ), ( "markdown_starts_with", Encode.string |> Encode.optional input.markdown_starts_with ), ( "markdown_not_starts_with", Encode.string |> Encode.optional input.markdown_not_starts_with ), ( "markdown_ends_with", Encode.string |> Encode.optional input.markdown_ends_with ), ( "markdown_not_ends_with", Encode.string |> Encode.optional input.markdown_not_ends_with ), ( "markup", Encode.string |> Encode.optional input.markup ), ( "markup_not", Encode.string |> Encode.optional input.markup_not ), ( "markup_in", (Encode.string |> Encode.list) |> Encode.optional input.markup_in ), ( "markup_not_in", (Encode.string |> Encode.list) |> Encode.optional input.markup_not_in ), ( "markup_lt", Encode.string |> Encode.optional input.markup_lt ), ( "markup_lte", Encode.string |> Encode.optional input.markup_lte ), ( "markup_gt", Encode.string |> Encode.optional input.markup_gt ), ( "markup_gte", Encode.string |> Encode.optional input.markup_gte ), ( "markup_contains", Encode.string |> Encode.optional input.markup_contains ), ( "markup_not_contains", Encode.string |> Encode.optional input.markup_not_contains ), ( "markup_starts_with", Encode.string |> Encode.optional input.markup_starts_with ), ( "markup_not_starts_with", Encode.string |> Encode.optional input.markup_not_starts_with ), ( "markup_ends_with", Encode.string |> Encode.optional input.markup_ends_with ), ( "markup_not_ends_with", Encode.string |> Encode.optional input.markup_not_ends_with ), ( "notes", Encode.string |> Encode.optional input.notes ), ( "notes_not", Encode.string |> Encode.optional input.notes_not ), ( "notes_in", (Encode.string |> Encode.list) |> Encode.optional input.notes_in ), ( "notes_not_in", (Encode.string |> Encode.list) |> Encode.optional input.notes_not_in ), ( "notes_lt", Encode.string |> Encode.optional input.notes_lt ), ( "notes_lte", Encode.string |> Encode.optional input.notes_lte ), ( "notes_gt", Encode.string |> Encode.optional input.notes_gt ), ( "notes_gte", Encode.string |> Encode.optional input.notes_gte ), ( "notes_contains", Encode.string |> Encode.optional input.notes_contains ), ( "notes_not_contains", Encode.string |> Encode.optional input.notes_not_contains ), ( "notes_starts_with", Encode.string |> Encode.optional input.notes_starts_with ), ( "notes_not_starts_with", Encode.string |> Encode.optional input.notes_not_starts_with ), ( "notes_ends_with", Encode.string |> Encode.optional input.notes_ends_with ), ( "notes_not_ends_with", Encode.string |> Encode.optional input.notes_not_ends_with ), ( "published", Encode.bool |> Encode.optional input.published ), ( "published_not", Encode.bool |> Encode.optional input.published_not ), ( "title", Encode.string |> Encode.optional input.title ), ( "title_not", Encode.string |> Encode.optional input.title_not ), ( "title_in", (Encode.string |> Encode.list) |> Encode.optional input.title_in ), ( "title_not_in", (Encode.string |> Encode.list) |> Encode.optional input.title_not_in ), ( "title_lt", Encode.string |> Encode.optional input.title_lt ), ( "title_lte", Encode.string |> Encode.optional input.title_lte ), ( "title_gt", Encode.string |> Encode.optional input.title_gt ), ( "title_gte", Encode.string |> Encode.optional input.title_gte ), ( "title_contains", Encode.string |> Encode.optional input.title_contains ), ( "title_not_contains", Encode.string |> Encode.optional input.title_not_contains ), ( "title_starts_with", Encode.string |> Encode.optional input.title_starts_with ), ( "title_not_starts_with", Encode.string |> Encode.optional input.title_not_starts_with ), ( "title_ends_with", Encode.string |> Encode.optional input.title_ends_with ), ( "title_not_ends_with", Encode.string |> Encode.optional input.title_not_ends_with ), ( "updatedAt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_gte ), ( "solutions_every", encodeSolutionFilter |> Encode.optional input.solutions_every ), ( "solutions_some", encodeSolutionFilter |> Encode.optional input.solutions_some ), ( "solutions_none", encodeSolutionFilter |> Encode.optional input.solutions_none ) ]


buildChallengeSubscriptionFilter : (ChallengeSubscriptionFilterOptionalFields -> ChallengeSubscriptionFilterOptionalFields) -> ChallengeSubscriptionFilter
buildChallengeSubscriptionFilter fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    ChallengeSubscriptionFilter { and = optionals.and, or = optionals.or, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias ChallengeSubscriptionFilterOptionalFields =
    { and : OptionalArgument (List ChallengeSubscriptionFilter)
    , or : OptionalArgument (List ChallengeSubscriptionFilter)
    , mutation_in : OptionalArgument (List Graphcool.Enum.ModelMutationType_.ModelMutationType_)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ChallengeSubscriptionFilterNode
    }


{-| Type alias for the `ChallengeSubscriptionFilter` attributes. Note that this type
needs to use the `ChallengeSubscriptionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ChallengeSubscriptionFilterRaw =
    { and : OptionalArgument (List ChallengeSubscriptionFilter)
    , or : OptionalArgument (List ChallengeSubscriptionFilter)
    , mutation_in : OptionalArgument (List Graphcool.Enum.ModelMutationType_.ModelMutationType_)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ChallengeSubscriptionFilterNode
    }


{-| Type for the ChallengeSubscriptionFilter input object.
-}
type ChallengeSubscriptionFilter
    = ChallengeSubscriptionFilter ChallengeSubscriptionFilterRaw


{-| Encode a ChallengeSubscriptionFilter into a value that can be used as an argument.
-}
encodeChallengeSubscriptionFilter : ChallengeSubscriptionFilter -> Value
encodeChallengeSubscriptionFilter (ChallengeSubscriptionFilter input) =
    Encode.maybeObject
        [ ( "AND", (encodeChallengeSubscriptionFilter |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeChallengeSubscriptionFilter |> Encode.list) |> Encode.optional input.or ), ( "mutation_in", (Encode.enum Graphcool.Enum.ModelMutationType_.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeChallengeSubscriptionFilterNode |> Encode.optional input.node ) ]


buildChallengeSubscriptionFilterNode : (ChallengeSubscriptionFilterNodeOptionalFields -> ChallengeSubscriptionFilterNodeOptionalFields) -> ChallengeSubscriptionFilterNode
buildChallengeSubscriptionFilterNode fillOptionals =
    let
        optionals =
            fillOptionals
                { activeFrom = Absent, activeFrom_not = Absent, activeFrom_in = Absent, activeFrom_not_in = Absent, activeFrom_lt = Absent, activeFrom_lte = Absent, activeFrom_gt = Absent, activeFrom_gte = Absent, activeTo = Absent, activeTo_not = Absent, activeTo_in = Absent, activeTo_not_in = Absent, activeTo_lt = Absent, activeTo_lte = Absent, activeTo_gt = Absent, activeTo_gte = Absent, answer = Absent, answer_not = Absent, answer_in = Absent, answer_not_in = Absent, answer_lt = Absent, answer_lte = Absent, answer_gt = Absent, answer_gte = Absent, answer_contains = Absent, answer_not_contains = Absent, answer_starts_with = Absent, answer_not_starts_with = Absent, answer_ends_with = Absent, answer_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, discussionUrl = Absent, discussionUrl_not = Absent, discussionUrl_in = Absent, discussionUrl_not_in = Absent, discussionUrl_lt = Absent, discussionUrl_lte = Absent, discussionUrl_gt = Absent, discussionUrl_gte = Absent, discussionUrl_contains = Absent, discussionUrl_not_contains = Absent, discussionUrl_starts_with = Absent, discussionUrl_not_starts_with = Absent, discussionUrl_ends_with = Absent, discussionUrl_not_ends_with = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, markdown = Absent, markdown_not = Absent, markdown_in = Absent, markdown_not_in = Absent, markdown_lt = Absent, markdown_lte = Absent, markdown_gt = Absent, markdown_gte = Absent, markdown_contains = Absent, markdown_not_contains = Absent, markdown_starts_with = Absent, markdown_not_starts_with = Absent, markdown_ends_with = Absent, markdown_not_ends_with = Absent, markup = Absent, markup_not = Absent, markup_in = Absent, markup_not_in = Absent, markup_lt = Absent, markup_lte = Absent, markup_gt = Absent, markup_gte = Absent, markup_contains = Absent, markup_not_contains = Absent, markup_starts_with = Absent, markup_not_starts_with = Absent, markup_ends_with = Absent, markup_not_ends_with = Absent, notes = Absent, notes_not = Absent, notes_in = Absent, notes_not_in = Absent, notes_lt = Absent, notes_lte = Absent, notes_gt = Absent, notes_gte = Absent, notes_contains = Absent, notes_not_contains = Absent, notes_starts_with = Absent, notes_not_starts_with = Absent, notes_ends_with = Absent, notes_not_ends_with = Absent, published = Absent, published_not = Absent, title = Absent, title_not = Absent, title_in = Absent, title_not_in = Absent, title_lt = Absent, title_lte = Absent, title_gt = Absent, title_gte = Absent, title_contains = Absent, title_not_contains = Absent, title_starts_with = Absent, title_not_starts_with = Absent, title_ends_with = Absent, title_not_ends_with = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, solutions_every = Absent, solutions_some = Absent, solutions_none = Absent }
    in
    ChallengeSubscriptionFilterNode { activeFrom = optionals.activeFrom, activeFrom_not = optionals.activeFrom_not, activeFrom_in = optionals.activeFrom_in, activeFrom_not_in = optionals.activeFrom_not_in, activeFrom_lt = optionals.activeFrom_lt, activeFrom_lte = optionals.activeFrom_lte, activeFrom_gt = optionals.activeFrom_gt, activeFrom_gte = optionals.activeFrom_gte, activeTo = optionals.activeTo, activeTo_not = optionals.activeTo_not, activeTo_in = optionals.activeTo_in, activeTo_not_in = optionals.activeTo_not_in, activeTo_lt = optionals.activeTo_lt, activeTo_lte = optionals.activeTo_lte, activeTo_gt = optionals.activeTo_gt, activeTo_gte = optionals.activeTo_gte, answer = optionals.answer, answer_not = optionals.answer_not, answer_in = optionals.answer_in, answer_not_in = optionals.answer_not_in, answer_lt = optionals.answer_lt, answer_lte = optionals.answer_lte, answer_gt = optionals.answer_gt, answer_gte = optionals.answer_gte, answer_contains = optionals.answer_contains, answer_not_contains = optionals.answer_not_contains, answer_starts_with = optionals.answer_starts_with, answer_not_starts_with = optionals.answer_not_starts_with, answer_ends_with = optionals.answer_ends_with, answer_not_ends_with = optionals.answer_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, discussionUrl = optionals.discussionUrl, discussionUrl_not = optionals.discussionUrl_not, discussionUrl_in = optionals.discussionUrl_in, discussionUrl_not_in = optionals.discussionUrl_not_in, discussionUrl_lt = optionals.discussionUrl_lt, discussionUrl_lte = optionals.discussionUrl_lte, discussionUrl_gt = optionals.discussionUrl_gt, discussionUrl_gte = optionals.discussionUrl_gte, discussionUrl_contains = optionals.discussionUrl_contains, discussionUrl_not_contains = optionals.discussionUrl_not_contains, discussionUrl_starts_with = optionals.discussionUrl_starts_with, discussionUrl_not_starts_with = optionals.discussionUrl_not_starts_with, discussionUrl_ends_with = optionals.discussionUrl_ends_with, discussionUrl_not_ends_with = optionals.discussionUrl_not_ends_with, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, markdown = optionals.markdown, markdown_not = optionals.markdown_not, markdown_in = optionals.markdown_in, markdown_not_in = optionals.markdown_not_in, markdown_lt = optionals.markdown_lt, markdown_lte = optionals.markdown_lte, markdown_gt = optionals.markdown_gt, markdown_gte = optionals.markdown_gte, markdown_contains = optionals.markdown_contains, markdown_not_contains = optionals.markdown_not_contains, markdown_starts_with = optionals.markdown_starts_with, markdown_not_starts_with = optionals.markdown_not_starts_with, markdown_ends_with = optionals.markdown_ends_with, markdown_not_ends_with = optionals.markdown_not_ends_with, markup = optionals.markup, markup_not = optionals.markup_not, markup_in = optionals.markup_in, markup_not_in = optionals.markup_not_in, markup_lt = optionals.markup_lt, markup_lte = optionals.markup_lte, markup_gt = optionals.markup_gt, markup_gte = optionals.markup_gte, markup_contains = optionals.markup_contains, markup_not_contains = optionals.markup_not_contains, markup_starts_with = optionals.markup_starts_with, markup_not_starts_with = optionals.markup_not_starts_with, markup_ends_with = optionals.markup_ends_with, markup_not_ends_with = optionals.markup_not_ends_with, notes = optionals.notes, notes_not = optionals.notes_not, notes_in = optionals.notes_in, notes_not_in = optionals.notes_not_in, notes_lt = optionals.notes_lt, notes_lte = optionals.notes_lte, notes_gt = optionals.notes_gt, notes_gte = optionals.notes_gte, notes_contains = optionals.notes_contains, notes_not_contains = optionals.notes_not_contains, notes_starts_with = optionals.notes_starts_with, notes_not_starts_with = optionals.notes_not_starts_with, notes_ends_with = optionals.notes_ends_with, notes_not_ends_with = optionals.notes_not_ends_with, published = optionals.published, published_not = optionals.published_not, title = optionals.title, title_not = optionals.title_not, title_in = optionals.title_in, title_not_in = optionals.title_not_in, title_lt = optionals.title_lt, title_lte = optionals.title_lte, title_gt = optionals.title_gt, title_gte = optionals.title_gte, title_contains = optionals.title_contains, title_not_contains = optionals.title_not_contains, title_starts_with = optionals.title_starts_with, title_not_starts_with = optionals.title_not_starts_with, title_ends_with = optionals.title_ends_with, title_not_ends_with = optionals.title_not_ends_with, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, solutions_every = optionals.solutions_every, solutions_some = optionals.solutions_some, solutions_none = optionals.solutions_none }


type alias ChallengeSubscriptionFilterNodeOptionalFields =
    { activeFrom : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeFrom_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeFrom_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeTo_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeTo_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , answer : OptionalArgument String
    , answer_not : OptionalArgument String
    , answer_in : OptionalArgument (List String)
    , answer_not_in : OptionalArgument (List String)
    , answer_lt : OptionalArgument String
    , answer_lte : OptionalArgument String
    , answer_gt : OptionalArgument String
    , answer_gte : OptionalArgument String
    , answer_contains : OptionalArgument String
    , answer_not_contains : OptionalArgument String
    , answer_starts_with : OptionalArgument String
    , answer_not_starts_with : OptionalArgument String
    , answer_ends_with : OptionalArgument String
    , answer_not_ends_with : OptionalArgument String
    , createdAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , discussionUrl : OptionalArgument String
    , discussionUrl_not : OptionalArgument String
    , discussionUrl_in : OptionalArgument (List String)
    , discussionUrl_not_in : OptionalArgument (List String)
    , discussionUrl_lt : OptionalArgument String
    , discussionUrl_lte : OptionalArgument String
    , discussionUrl_gt : OptionalArgument String
    , discussionUrl_gte : OptionalArgument String
    , discussionUrl_contains : OptionalArgument String
    , discussionUrl_not_contains : OptionalArgument String
    , discussionUrl_starts_with : OptionalArgument String
    , discussionUrl_not_starts_with : OptionalArgument String
    , discussionUrl_ends_with : OptionalArgument String
    , discussionUrl_not_ends_with : OptionalArgument String
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_not_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_lt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_lte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , markdown : OptionalArgument String
    , markdown_not : OptionalArgument String
    , markdown_in : OptionalArgument (List String)
    , markdown_not_in : OptionalArgument (List String)
    , markdown_lt : OptionalArgument String
    , markdown_lte : OptionalArgument String
    , markdown_gt : OptionalArgument String
    , markdown_gte : OptionalArgument String
    , markdown_contains : OptionalArgument String
    , markdown_not_contains : OptionalArgument String
    , markdown_starts_with : OptionalArgument String
    , markdown_not_starts_with : OptionalArgument String
    , markdown_ends_with : OptionalArgument String
    , markdown_not_ends_with : OptionalArgument String
    , markup : OptionalArgument String
    , markup_not : OptionalArgument String
    , markup_in : OptionalArgument (List String)
    , markup_not_in : OptionalArgument (List String)
    , markup_lt : OptionalArgument String
    , markup_lte : OptionalArgument String
    , markup_gt : OptionalArgument String
    , markup_gte : OptionalArgument String
    , markup_contains : OptionalArgument String
    , markup_not_contains : OptionalArgument String
    , markup_starts_with : OptionalArgument String
    , markup_not_starts_with : OptionalArgument String
    , markup_ends_with : OptionalArgument String
    , markup_not_ends_with : OptionalArgument String
    , notes : OptionalArgument String
    , notes_not : OptionalArgument String
    , notes_in : OptionalArgument (List String)
    , notes_not_in : OptionalArgument (List String)
    , notes_lt : OptionalArgument String
    , notes_lte : OptionalArgument String
    , notes_gt : OptionalArgument String
    , notes_gte : OptionalArgument String
    , notes_contains : OptionalArgument String
    , notes_not_contains : OptionalArgument String
    , notes_starts_with : OptionalArgument String
    , notes_not_starts_with : OptionalArgument String
    , notes_ends_with : OptionalArgument String
    , notes_not_ends_with : OptionalArgument String
    , published : OptionalArgument Bool
    , published_not : OptionalArgument Bool
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , updatedAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , solutions_every : OptionalArgument SolutionFilter
    , solutions_some : OptionalArgument SolutionFilter
    , solutions_none : OptionalArgument SolutionFilter
    }


{-| Type alias for the `ChallengeSubscriptionFilterNode` attributes. Note that this type
needs to use the `ChallengeSubscriptionFilterNode` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ChallengeSubscriptionFilterNodeRaw =
    { activeFrom : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeFrom_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeFrom_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeFrom_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeTo_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , activeTo_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , answer : OptionalArgument String
    , answer_not : OptionalArgument String
    , answer_in : OptionalArgument (List String)
    , answer_not_in : OptionalArgument (List String)
    , answer_lt : OptionalArgument String
    , answer_lte : OptionalArgument String
    , answer_gt : OptionalArgument String
    , answer_gte : OptionalArgument String
    , answer_contains : OptionalArgument String
    , answer_not_contains : OptionalArgument String
    , answer_starts_with : OptionalArgument String
    , answer_not_starts_with : OptionalArgument String
    , answer_ends_with : OptionalArgument String
    , answer_not_ends_with : OptionalArgument String
    , createdAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , discussionUrl : OptionalArgument String
    , discussionUrl_not : OptionalArgument String
    , discussionUrl_in : OptionalArgument (List String)
    , discussionUrl_not_in : OptionalArgument (List String)
    , discussionUrl_lt : OptionalArgument String
    , discussionUrl_lte : OptionalArgument String
    , discussionUrl_gt : OptionalArgument String
    , discussionUrl_gte : OptionalArgument String
    , discussionUrl_contains : OptionalArgument String
    , discussionUrl_not_contains : OptionalArgument String
    , discussionUrl_starts_with : OptionalArgument String
    , discussionUrl_not_starts_with : OptionalArgument String
    , discussionUrl_ends_with : OptionalArgument String
    , discussionUrl_not_ends_with : OptionalArgument String
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_not_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_lt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_lte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , markdown : OptionalArgument String
    , markdown_not : OptionalArgument String
    , markdown_in : OptionalArgument (List String)
    , markdown_not_in : OptionalArgument (List String)
    , markdown_lt : OptionalArgument String
    , markdown_lte : OptionalArgument String
    , markdown_gt : OptionalArgument String
    , markdown_gte : OptionalArgument String
    , markdown_contains : OptionalArgument String
    , markdown_not_contains : OptionalArgument String
    , markdown_starts_with : OptionalArgument String
    , markdown_not_starts_with : OptionalArgument String
    , markdown_ends_with : OptionalArgument String
    , markdown_not_ends_with : OptionalArgument String
    , markup : OptionalArgument String
    , markup_not : OptionalArgument String
    , markup_in : OptionalArgument (List String)
    , markup_not_in : OptionalArgument (List String)
    , markup_lt : OptionalArgument String
    , markup_lte : OptionalArgument String
    , markup_gt : OptionalArgument String
    , markup_gte : OptionalArgument String
    , markup_contains : OptionalArgument String
    , markup_not_contains : OptionalArgument String
    , markup_starts_with : OptionalArgument String
    , markup_not_starts_with : OptionalArgument String
    , markup_ends_with : OptionalArgument String
    , markup_not_ends_with : OptionalArgument String
    , notes : OptionalArgument String
    , notes_not : OptionalArgument String
    , notes_in : OptionalArgument (List String)
    , notes_not_in : OptionalArgument (List String)
    , notes_lt : OptionalArgument String
    , notes_lte : OptionalArgument String
    , notes_gt : OptionalArgument String
    , notes_gte : OptionalArgument String
    , notes_contains : OptionalArgument String
    , notes_not_contains : OptionalArgument String
    , notes_starts_with : OptionalArgument String
    , notes_not_starts_with : OptionalArgument String
    , notes_ends_with : OptionalArgument String
    , notes_not_ends_with : OptionalArgument String
    , published : OptionalArgument Bool
    , published_not : OptionalArgument Bool
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , updatedAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , solutions_every : OptionalArgument SolutionFilter
    , solutions_some : OptionalArgument SolutionFilter
    , solutions_none : OptionalArgument SolutionFilter
    }


{-| Type for the ChallengeSubscriptionFilterNode input object.
-}
type ChallengeSubscriptionFilterNode
    = ChallengeSubscriptionFilterNode ChallengeSubscriptionFilterNodeRaw


{-| Encode a ChallengeSubscriptionFilterNode into a value that can be used as an argument.
-}
encodeChallengeSubscriptionFilterNode : ChallengeSubscriptionFilterNode -> Value
encodeChallengeSubscriptionFilterNode (ChallengeSubscriptionFilterNode input) =
    Encode.maybeObject
        [ ( "activeFrom", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom ), ( "activeFrom_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom_not ), ( "activeFrom_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.activeFrom_in ), ( "activeFrom_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.activeFrom_not_in ), ( "activeFrom_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom_lt ), ( "activeFrom_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom_lte ), ( "activeFrom_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom_gt ), ( "activeFrom_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom_gte ), ( "activeTo", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo ), ( "activeTo_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo_not ), ( "activeTo_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.activeTo_in ), ( "activeTo_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.activeTo_not_in ), ( "activeTo_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo_lt ), ( "activeTo_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo_lte ), ( "activeTo_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo_gt ), ( "activeTo_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo_gte ), ( "answer", Encode.string |> Encode.optional input.answer ), ( "answer_not", Encode.string |> Encode.optional input.answer_not ), ( "answer_in", (Encode.string |> Encode.list) |> Encode.optional input.answer_in ), ( "answer_not_in", (Encode.string |> Encode.list) |> Encode.optional input.answer_not_in ), ( "answer_lt", Encode.string |> Encode.optional input.answer_lt ), ( "answer_lte", Encode.string |> Encode.optional input.answer_lte ), ( "answer_gt", Encode.string |> Encode.optional input.answer_gt ), ( "answer_gte", Encode.string |> Encode.optional input.answer_gte ), ( "answer_contains", Encode.string |> Encode.optional input.answer_contains ), ( "answer_not_contains", Encode.string |> Encode.optional input.answer_not_contains ), ( "answer_starts_with", Encode.string |> Encode.optional input.answer_starts_with ), ( "answer_not_starts_with", Encode.string |> Encode.optional input.answer_not_starts_with ), ( "answer_ends_with", Encode.string |> Encode.optional input.answer_ends_with ), ( "answer_not_ends_with", Encode.string |> Encode.optional input.answer_not_ends_with ), ( "createdAt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt ), ( "createdAt_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_gte ), ( "discussionUrl", Encode.string |> Encode.optional input.discussionUrl ), ( "discussionUrl_not", Encode.string |> Encode.optional input.discussionUrl_not ), ( "discussionUrl_in", (Encode.string |> Encode.list) |> Encode.optional input.discussionUrl_in ), ( "discussionUrl_not_in", (Encode.string |> Encode.list) |> Encode.optional input.discussionUrl_not_in ), ( "discussionUrl_lt", Encode.string |> Encode.optional input.discussionUrl_lt ), ( "discussionUrl_lte", Encode.string |> Encode.optional input.discussionUrl_lte ), ( "discussionUrl_gt", Encode.string |> Encode.optional input.discussionUrl_gt ), ( "discussionUrl_gte", Encode.string |> Encode.optional input.discussionUrl_gte ), ( "discussionUrl_contains", Encode.string |> Encode.optional input.discussionUrl_contains ), ( "discussionUrl_not_contains", Encode.string |> Encode.optional input.discussionUrl_not_contains ), ( "discussionUrl_starts_with", Encode.string |> Encode.optional input.discussionUrl_starts_with ), ( "discussionUrl_not_starts_with", Encode.string |> Encode.optional input.discussionUrl_not_starts_with ), ( "discussionUrl_ends_with", Encode.string |> Encode.optional input.discussionUrl_ends_with ), ( "discussionUrl_not_ends_with", Encode.string |> Encode.optional input.discussionUrl_not_ends_with ), ( "id", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "id_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not ), ( "id_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_lt ), ( "id_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_lte ), ( "id_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_gt ), ( "id_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_gte ), ( "id_contains", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_contains ), ( "id_not_contains", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_ends_with ), ( "markdown", Encode.string |> Encode.optional input.markdown ), ( "markdown_not", Encode.string |> Encode.optional input.markdown_not ), ( "markdown_in", (Encode.string |> Encode.list) |> Encode.optional input.markdown_in ), ( "markdown_not_in", (Encode.string |> Encode.list) |> Encode.optional input.markdown_not_in ), ( "markdown_lt", Encode.string |> Encode.optional input.markdown_lt ), ( "markdown_lte", Encode.string |> Encode.optional input.markdown_lte ), ( "markdown_gt", Encode.string |> Encode.optional input.markdown_gt ), ( "markdown_gte", Encode.string |> Encode.optional input.markdown_gte ), ( "markdown_contains", Encode.string |> Encode.optional input.markdown_contains ), ( "markdown_not_contains", Encode.string |> Encode.optional input.markdown_not_contains ), ( "markdown_starts_with", Encode.string |> Encode.optional input.markdown_starts_with ), ( "markdown_not_starts_with", Encode.string |> Encode.optional input.markdown_not_starts_with ), ( "markdown_ends_with", Encode.string |> Encode.optional input.markdown_ends_with ), ( "markdown_not_ends_with", Encode.string |> Encode.optional input.markdown_not_ends_with ), ( "markup", Encode.string |> Encode.optional input.markup ), ( "markup_not", Encode.string |> Encode.optional input.markup_not ), ( "markup_in", (Encode.string |> Encode.list) |> Encode.optional input.markup_in ), ( "markup_not_in", (Encode.string |> Encode.list) |> Encode.optional input.markup_not_in ), ( "markup_lt", Encode.string |> Encode.optional input.markup_lt ), ( "markup_lte", Encode.string |> Encode.optional input.markup_lte ), ( "markup_gt", Encode.string |> Encode.optional input.markup_gt ), ( "markup_gte", Encode.string |> Encode.optional input.markup_gte ), ( "markup_contains", Encode.string |> Encode.optional input.markup_contains ), ( "markup_not_contains", Encode.string |> Encode.optional input.markup_not_contains ), ( "markup_starts_with", Encode.string |> Encode.optional input.markup_starts_with ), ( "markup_not_starts_with", Encode.string |> Encode.optional input.markup_not_starts_with ), ( "markup_ends_with", Encode.string |> Encode.optional input.markup_ends_with ), ( "markup_not_ends_with", Encode.string |> Encode.optional input.markup_not_ends_with ), ( "notes", Encode.string |> Encode.optional input.notes ), ( "notes_not", Encode.string |> Encode.optional input.notes_not ), ( "notes_in", (Encode.string |> Encode.list) |> Encode.optional input.notes_in ), ( "notes_not_in", (Encode.string |> Encode.list) |> Encode.optional input.notes_not_in ), ( "notes_lt", Encode.string |> Encode.optional input.notes_lt ), ( "notes_lte", Encode.string |> Encode.optional input.notes_lte ), ( "notes_gt", Encode.string |> Encode.optional input.notes_gt ), ( "notes_gte", Encode.string |> Encode.optional input.notes_gte ), ( "notes_contains", Encode.string |> Encode.optional input.notes_contains ), ( "notes_not_contains", Encode.string |> Encode.optional input.notes_not_contains ), ( "notes_starts_with", Encode.string |> Encode.optional input.notes_starts_with ), ( "notes_not_starts_with", Encode.string |> Encode.optional input.notes_not_starts_with ), ( "notes_ends_with", Encode.string |> Encode.optional input.notes_ends_with ), ( "notes_not_ends_with", Encode.string |> Encode.optional input.notes_not_ends_with ), ( "published", Encode.bool |> Encode.optional input.published ), ( "published_not", Encode.bool |> Encode.optional input.published_not ), ( "title", Encode.string |> Encode.optional input.title ), ( "title_not", Encode.string |> Encode.optional input.title_not ), ( "title_in", (Encode.string |> Encode.list) |> Encode.optional input.title_in ), ( "title_not_in", (Encode.string |> Encode.list) |> Encode.optional input.title_not_in ), ( "title_lt", Encode.string |> Encode.optional input.title_lt ), ( "title_lte", Encode.string |> Encode.optional input.title_lte ), ( "title_gt", Encode.string |> Encode.optional input.title_gt ), ( "title_gte", Encode.string |> Encode.optional input.title_gte ), ( "title_contains", Encode.string |> Encode.optional input.title_contains ), ( "title_not_contains", Encode.string |> Encode.optional input.title_not_contains ), ( "title_starts_with", Encode.string |> Encode.optional input.title_starts_with ), ( "title_not_starts_with", Encode.string |> Encode.optional input.title_not_starts_with ), ( "title_ends_with", Encode.string |> Encode.optional input.title_ends_with ), ( "title_not_ends_with", Encode.string |> Encode.optional input.title_not_ends_with ), ( "updatedAt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_gte ), ( "solutions_every", encodeSolutionFilter |> Encode.optional input.solutions_every ), ( "solutions_some", encodeSolutionFilter |> Encode.optional input.solutions_some ), ( "solutions_none", encodeSolutionFilter |> Encode.optional input.solutions_none ) ]


buildChallengesolutionsSolution : ChallengesolutionsSolutionRequiredFields -> (ChallengesolutionsSolutionOptionalFields -> ChallengesolutionsSolutionOptionalFields) -> ChallengesolutionsSolution
buildChallengesolutionsSolution required fillOptionals =
    let
        optionals =
            fillOptionals
                { attempts = Absent, userId = Absent, user = Absent }
    in
    ChallengesolutionsSolution { attempts = optionals.attempts, solved = required.solved, userId = optionals.userId, user = optionals.user }


type alias ChallengesolutionsSolutionRequiredFields =
    { solved : Bool }


type alias ChallengesolutionsSolutionOptionalFields =
    { attempts : OptionalArgument Int
    , userId : OptionalArgument Graphcool.ScalarCodecs.Id
    , user : OptionalArgument SolutionuserUser
    }


{-| Type alias for the `ChallengesolutionsSolution` attributes. Note that this type
needs to use the `ChallengesolutionsSolution` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ChallengesolutionsSolutionRaw =
    { attempts : OptionalArgument Int
    , solved : Bool
    , userId : OptionalArgument Graphcool.ScalarCodecs.Id
    , user : OptionalArgument SolutionuserUser
    }


{-| Type for the ChallengesolutionsSolution input object.
-}
type ChallengesolutionsSolution
    = ChallengesolutionsSolution ChallengesolutionsSolutionRaw


{-| Encode a ChallengesolutionsSolution into a value that can be used as an argument.
-}
encodeChallengesolutionsSolution : ChallengesolutionsSolution -> Value
encodeChallengesolutionsSolution (ChallengesolutionsSolution input) =
    Encode.maybeObject
        [ ( "attempts", Encode.int |> Encode.optional input.attempts ), ( "solved", Encode.bool input.solved |> Just ), ( "userId", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.userId ), ( "user", encodeSolutionuserUser |> Encode.optional input.user ) ]


buildCreateChallenge : CreateChallengeRequiredFields -> (CreateChallengeOptionalFields -> CreateChallengeOptionalFields) -> CreateChallenge
buildCreateChallenge required fillOptionals =
    let
        optionals =
            fillOptionals
                { activeFrom = Absent, activeTo = Absent, discussionUrl = Absent, notes = Absent, published = Absent, solutionsIds = Absent, solutions = Absent }
    in
    CreateChallenge { activeFrom = optionals.activeFrom, activeTo = optionals.activeTo, answer = required.answer, discussionUrl = optionals.discussionUrl, markdown = required.markdown, markup = required.markup, notes = optionals.notes, published = optionals.published, title = required.title, solutionsIds = optionals.solutionsIds, solutions = optionals.solutions }


type alias CreateChallengeRequiredFields =
    { answer : String
    , markdown : String
    , markup : String
    , title : String
    }


type alias CreateChallengeOptionalFields =
    { activeFrom : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , discussionUrl : OptionalArgument String
    , notes : OptionalArgument String
    , published : OptionalArgument Bool
    , solutionsIds : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , solutions : OptionalArgument (List ChallengesolutionsSolution)
    }


{-| Type alias for the `CreateChallenge` attributes. Note that this type
needs to use the `CreateChallenge` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias CreateChallengeRaw =
    { activeFrom : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , answer : String
    , discussionUrl : OptionalArgument String
    , markdown : String
    , markup : String
    , notes : OptionalArgument String
    , published : OptionalArgument Bool
    , title : String
    , solutionsIds : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , solutions : OptionalArgument (List ChallengesolutionsSolution)
    }


{-| Type for the CreateChallenge input object.
-}
type CreateChallenge
    = CreateChallenge CreateChallengeRaw


{-| Encode a CreateChallenge into a value that can be used as an argument.
-}
encodeCreateChallenge : CreateChallenge -> Value
encodeCreateChallenge (CreateChallenge input) =
    Encode.maybeObject
        [ ( "activeFrom", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom ), ( "activeTo", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo ), ( "answer", Encode.string input.answer |> Just ), ( "discussionUrl", Encode.string |> Encode.optional input.discussionUrl ), ( "markdown", Encode.string input.markdown |> Just ), ( "markup", Encode.string input.markup |> Just ), ( "notes", Encode.string |> Encode.optional input.notes ), ( "published", Encode.bool |> Encode.optional input.published ), ( "title", Encode.string input.title |> Just ), ( "solutionsIds", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.solutionsIds ), ( "solutions", (encodeChallengesolutionsSolution |> Encode.list) |> Encode.optional input.solutions ) ]


buildCreateSolution : CreateSolutionRequiredFields -> (CreateSolutionOptionalFields -> CreateSolutionOptionalFields) -> CreateSolution
buildCreateSolution required fillOptionals =
    let
        optionals =
            fillOptionals
                { attempts = Absent, challengeId = Absent, challenge = Absent, userId = Absent, user = Absent }
    in
    CreateSolution { attempts = optionals.attempts, solved = required.solved, challengeId = optionals.challengeId, challenge = optionals.challenge, userId = optionals.userId, user = optionals.user }


type alias CreateSolutionRequiredFields =
    { solved : Bool }


type alias CreateSolutionOptionalFields =
    { attempts : OptionalArgument Int
    , challengeId : OptionalArgument Graphcool.ScalarCodecs.Id
    , challenge : OptionalArgument SolutionchallengeChallenge
    , userId : OptionalArgument Graphcool.ScalarCodecs.Id
    , user : OptionalArgument SolutionuserUser
    }


{-| Type alias for the `CreateSolution` attributes. Note that this type
needs to use the `CreateSolution` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias CreateSolutionRaw =
    { attempts : OptionalArgument Int
    , solved : Bool
    , challengeId : OptionalArgument Graphcool.ScalarCodecs.Id
    , challenge : OptionalArgument SolutionchallengeChallenge
    , userId : OptionalArgument Graphcool.ScalarCodecs.Id
    , user : OptionalArgument SolutionuserUser
    }


{-| Type for the CreateSolution input object.
-}
type CreateSolution
    = CreateSolution CreateSolutionRaw


{-| Encode a CreateSolution into a value that can be used as an argument.
-}
encodeCreateSolution : CreateSolution -> Value
encodeCreateSolution (CreateSolution input) =
    Encode.maybeObject
        [ ( "attempts", Encode.int |> Encode.optional input.attempts ), ( "solved", Encode.bool input.solved |> Just ), ( "challengeId", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.challengeId ), ( "challenge", encodeSolutionchallengeChallenge |> Encode.optional input.challenge ), ( "userId", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.userId ), ( "user", encodeSolutionuserUser |> Encode.optional input.user ) ]


buildCreateUser : (CreateUserOptionalFields -> CreateUserOptionalFields) -> CreateUser
buildCreateUser fillOptionals =
    let
        optionals =
            fillOptionals
                { auth0UserId = Absent, email = Absent, role = Absent, solutionsIds = Absent, solutions = Absent }
    in
    CreateUser { auth0UserId = optionals.auth0UserId, email = optionals.email, role = optionals.role, solutionsIds = optionals.solutionsIds, solutions = optionals.solutions }


type alias CreateUserOptionalFields =
    { auth0UserId : OptionalArgument String
    , email : OptionalArgument String
    , role : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , solutionsIds : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , solutions : OptionalArgument (List UsersolutionsSolution)
    }


{-| Type alias for the `CreateUser` attributes. Note that this type
needs to use the `CreateUser` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias CreateUserRaw =
    { auth0UserId : OptionalArgument String
    , email : OptionalArgument String
    , role : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , solutionsIds : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , solutions : OptionalArgument (List UsersolutionsSolution)
    }


{-| Type for the CreateUser input object.
-}
type CreateUser
    = CreateUser CreateUserRaw


{-| Encode a CreateUser into a value that can be used as an argument.
-}
encodeCreateUser : CreateUser -> Value
encodeCreateUser (CreateUser input) =
    Encode.maybeObject
        [ ( "auth0UserId", Encode.string |> Encode.optional input.auth0UserId ), ( "email", Encode.string |> Encode.optional input.email ), ( "role", Encode.enum Graphcool.Enum.UserRole.toString |> Encode.optional input.role ), ( "solutionsIds", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.solutionsIds ), ( "solutions", (encodeUsersolutionsSolution |> Encode.list) |> Encode.optional input.solutions ) ]


buildInvokeFunctionInput : InvokeFunctionInputRequiredFields -> (InvokeFunctionInputOptionalFields -> InvokeFunctionInputOptionalFields) -> InvokeFunctionInput
buildInvokeFunctionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { name = required.name, input = required.input, clientMutationId = optionals.clientMutationId }


type alias InvokeFunctionInputRequiredFields =
    { name : String
    , input : String
    }


type alias InvokeFunctionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the InvokeFunctionInput input object.
-}
type alias InvokeFunctionInput =
    { name : String
    , input : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a InvokeFunctionInput into a value that can be used as an argument.
-}
encodeInvokeFunctionInput : InvokeFunctionInput -> Value
encodeInvokeFunctionInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "input", Encode.string input.input |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ) ]


buildSolutionFilter : (SolutionFilterOptionalFields -> SolutionFilterOptionalFields) -> SolutionFilter
buildSolutionFilter fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, attempts = Absent, attempts_not = Absent, attempts_in = Absent, attempts_not_in = Absent, attempts_lt = Absent, attempts_lte = Absent, attempts_gt = Absent, attempts_gte = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, solved = Absent, solved_not = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, challenge = Absent, user = Absent }
    in
    SolutionFilter { and = optionals.and, or = optionals.or, attempts = optionals.attempts, attempts_not = optionals.attempts_not, attempts_in = optionals.attempts_in, attempts_not_in = optionals.attempts_not_in, attempts_lt = optionals.attempts_lt, attempts_lte = optionals.attempts_lte, attempts_gt = optionals.attempts_gt, attempts_gte = optionals.attempts_gte, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, solved = optionals.solved, solved_not = optionals.solved_not, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, challenge = optionals.challenge, user = optionals.user }


type alias SolutionFilterOptionalFields =
    { and : OptionalArgument (List SolutionFilter)
    , or : OptionalArgument (List SolutionFilter)
    , attempts : OptionalArgument Int
    , attempts_not : OptionalArgument Int
    , attempts_in : OptionalArgument (List Int)
    , attempts_not_in : OptionalArgument (List Int)
    , attempts_lt : OptionalArgument Int
    , attempts_lte : OptionalArgument Int
    , attempts_gt : OptionalArgument Int
    , attempts_gte : OptionalArgument Int
    , createdAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_not_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_lt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_lte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , solved : OptionalArgument Bool
    , solved_not : OptionalArgument Bool
    , updatedAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , challenge : OptionalArgument ChallengeFilter
    , user : OptionalArgument UserFilter
    }


{-| Type alias for the `SolutionFilter` attributes. Note that this type
needs to use the `SolutionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias SolutionFilterRaw =
    { and : OptionalArgument (List SolutionFilter)
    , or : OptionalArgument (List SolutionFilter)
    , attempts : OptionalArgument Int
    , attempts_not : OptionalArgument Int
    , attempts_in : OptionalArgument (List Int)
    , attempts_not_in : OptionalArgument (List Int)
    , attempts_lt : OptionalArgument Int
    , attempts_lte : OptionalArgument Int
    , attempts_gt : OptionalArgument Int
    , attempts_gte : OptionalArgument Int
    , createdAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_not_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_lt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_lte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , solved : OptionalArgument Bool
    , solved_not : OptionalArgument Bool
    , updatedAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , challenge : OptionalArgument ChallengeFilter
    , user : OptionalArgument UserFilter
    }


{-| Type for the SolutionFilter input object.
-}
type SolutionFilter
    = SolutionFilter SolutionFilterRaw


{-| Encode a SolutionFilter into a value that can be used as an argument.
-}
encodeSolutionFilter : SolutionFilter -> Value
encodeSolutionFilter (SolutionFilter input) =
    Encode.maybeObject
        [ ( "AND", (encodeSolutionFilter |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeSolutionFilter |> Encode.list) |> Encode.optional input.or ), ( "attempts", Encode.int |> Encode.optional input.attempts ), ( "attempts_not", Encode.int |> Encode.optional input.attempts_not ), ( "attempts_in", (Encode.int |> Encode.list) |> Encode.optional input.attempts_in ), ( "attempts_not_in", (Encode.int |> Encode.list) |> Encode.optional input.attempts_not_in ), ( "attempts_lt", Encode.int |> Encode.optional input.attempts_lt ), ( "attempts_lte", Encode.int |> Encode.optional input.attempts_lte ), ( "attempts_gt", Encode.int |> Encode.optional input.attempts_gt ), ( "attempts_gte", Encode.int |> Encode.optional input.attempts_gte ), ( "createdAt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt ), ( "createdAt_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_gte ), ( "id", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "id_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not ), ( "id_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_lt ), ( "id_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_lte ), ( "id_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_gt ), ( "id_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_gte ), ( "id_contains", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_contains ), ( "id_not_contains", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_ends_with ), ( "solved", Encode.bool |> Encode.optional input.solved ), ( "solved_not", Encode.bool |> Encode.optional input.solved_not ), ( "updatedAt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_gte ), ( "challenge", encodeChallengeFilter |> Encode.optional input.challenge ), ( "user", encodeUserFilter |> Encode.optional input.user ) ]


buildSolutionSubscriptionFilter : (SolutionSubscriptionFilterOptionalFields -> SolutionSubscriptionFilterOptionalFields) -> SolutionSubscriptionFilter
buildSolutionSubscriptionFilter fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    SolutionSubscriptionFilter { and = optionals.and, or = optionals.or, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias SolutionSubscriptionFilterOptionalFields =
    { and : OptionalArgument (List SolutionSubscriptionFilter)
    , or : OptionalArgument (List SolutionSubscriptionFilter)
    , mutation_in : OptionalArgument (List Graphcool.Enum.ModelMutationType_.ModelMutationType_)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument SolutionSubscriptionFilterNode
    }


{-| Type alias for the `SolutionSubscriptionFilter` attributes. Note that this type
needs to use the `SolutionSubscriptionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias SolutionSubscriptionFilterRaw =
    { and : OptionalArgument (List SolutionSubscriptionFilter)
    , or : OptionalArgument (List SolutionSubscriptionFilter)
    , mutation_in : OptionalArgument (List Graphcool.Enum.ModelMutationType_.ModelMutationType_)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument SolutionSubscriptionFilterNode
    }


{-| Type for the SolutionSubscriptionFilter input object.
-}
type SolutionSubscriptionFilter
    = SolutionSubscriptionFilter SolutionSubscriptionFilterRaw


{-| Encode a SolutionSubscriptionFilter into a value that can be used as an argument.
-}
encodeSolutionSubscriptionFilter : SolutionSubscriptionFilter -> Value
encodeSolutionSubscriptionFilter (SolutionSubscriptionFilter input) =
    Encode.maybeObject
        [ ( "AND", (encodeSolutionSubscriptionFilter |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeSolutionSubscriptionFilter |> Encode.list) |> Encode.optional input.or ), ( "mutation_in", (Encode.enum Graphcool.Enum.ModelMutationType_.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeSolutionSubscriptionFilterNode |> Encode.optional input.node ) ]


buildSolutionSubscriptionFilterNode : (SolutionSubscriptionFilterNodeOptionalFields -> SolutionSubscriptionFilterNodeOptionalFields) -> SolutionSubscriptionFilterNode
buildSolutionSubscriptionFilterNode fillOptionals =
    let
        optionals =
            fillOptionals
                { attempts = Absent, attempts_not = Absent, attempts_in = Absent, attempts_not_in = Absent, attempts_lt = Absent, attempts_lte = Absent, attempts_gt = Absent, attempts_gte = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, solved = Absent, solved_not = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, challenge = Absent, user = Absent }
    in
    SolutionSubscriptionFilterNode { attempts = optionals.attempts, attempts_not = optionals.attempts_not, attempts_in = optionals.attempts_in, attempts_not_in = optionals.attempts_not_in, attempts_lt = optionals.attempts_lt, attempts_lte = optionals.attempts_lte, attempts_gt = optionals.attempts_gt, attempts_gte = optionals.attempts_gte, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, solved = optionals.solved, solved_not = optionals.solved_not, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, challenge = optionals.challenge, user = optionals.user }


type alias SolutionSubscriptionFilterNodeOptionalFields =
    { attempts : OptionalArgument Int
    , attempts_not : OptionalArgument Int
    , attempts_in : OptionalArgument (List Int)
    , attempts_not_in : OptionalArgument (List Int)
    , attempts_lt : OptionalArgument Int
    , attempts_lte : OptionalArgument Int
    , attempts_gt : OptionalArgument Int
    , attempts_gte : OptionalArgument Int
    , createdAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_not_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_lt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_lte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , solved : OptionalArgument Bool
    , solved_not : OptionalArgument Bool
    , updatedAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , challenge : OptionalArgument ChallengeFilter
    , user : OptionalArgument UserFilter
    }


{-| Type alias for the `SolutionSubscriptionFilterNode` attributes. Note that this type
needs to use the `SolutionSubscriptionFilterNode` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias SolutionSubscriptionFilterNodeRaw =
    { attempts : OptionalArgument Int
    , attempts_not : OptionalArgument Int
    , attempts_in : OptionalArgument (List Int)
    , attempts_not_in : OptionalArgument (List Int)
    , attempts_lt : OptionalArgument Int
    , attempts_lte : OptionalArgument Int
    , attempts_gt : OptionalArgument Int
    , attempts_gte : OptionalArgument Int
    , createdAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_not_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_lt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_lte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , solved : OptionalArgument Bool
    , solved_not : OptionalArgument Bool
    , updatedAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , challenge : OptionalArgument ChallengeFilter
    , user : OptionalArgument UserFilter
    }


{-| Type for the SolutionSubscriptionFilterNode input object.
-}
type SolutionSubscriptionFilterNode
    = SolutionSubscriptionFilterNode SolutionSubscriptionFilterNodeRaw


{-| Encode a SolutionSubscriptionFilterNode into a value that can be used as an argument.
-}
encodeSolutionSubscriptionFilterNode : SolutionSubscriptionFilterNode -> Value
encodeSolutionSubscriptionFilterNode (SolutionSubscriptionFilterNode input) =
    Encode.maybeObject
        [ ( "attempts", Encode.int |> Encode.optional input.attempts ), ( "attempts_not", Encode.int |> Encode.optional input.attempts_not ), ( "attempts_in", (Encode.int |> Encode.list) |> Encode.optional input.attempts_in ), ( "attempts_not_in", (Encode.int |> Encode.list) |> Encode.optional input.attempts_not_in ), ( "attempts_lt", Encode.int |> Encode.optional input.attempts_lt ), ( "attempts_lte", Encode.int |> Encode.optional input.attempts_lte ), ( "attempts_gt", Encode.int |> Encode.optional input.attempts_gt ), ( "attempts_gte", Encode.int |> Encode.optional input.attempts_gte ), ( "createdAt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt ), ( "createdAt_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_gte ), ( "id", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "id_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not ), ( "id_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_lt ), ( "id_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_lte ), ( "id_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_gt ), ( "id_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_gte ), ( "id_contains", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_contains ), ( "id_not_contains", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_ends_with ), ( "solved", Encode.bool |> Encode.optional input.solved ), ( "solved_not", Encode.bool |> Encode.optional input.solved_not ), ( "updatedAt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_gte ), ( "challenge", encodeChallengeFilter |> Encode.optional input.challenge ), ( "user", encodeUserFilter |> Encode.optional input.user ) ]


buildSolutionchallengeChallenge : SolutionchallengeChallengeRequiredFields -> (SolutionchallengeChallengeOptionalFields -> SolutionchallengeChallengeOptionalFields) -> SolutionchallengeChallenge
buildSolutionchallengeChallenge required fillOptionals =
    let
        optionals =
            fillOptionals
                { activeFrom = Absent, activeTo = Absent, discussionUrl = Absent, notes = Absent, published = Absent, solutionsIds = Absent, solutions = Absent }
    in
    SolutionchallengeChallenge { activeFrom = optionals.activeFrom, activeTo = optionals.activeTo, answer = required.answer, discussionUrl = optionals.discussionUrl, markdown = required.markdown, markup = required.markup, notes = optionals.notes, published = optionals.published, title = required.title, solutionsIds = optionals.solutionsIds, solutions = optionals.solutions }


type alias SolutionchallengeChallengeRequiredFields =
    { answer : String
    , markdown : String
    , markup : String
    , title : String
    }


type alias SolutionchallengeChallengeOptionalFields =
    { activeFrom : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , discussionUrl : OptionalArgument String
    , notes : OptionalArgument String
    , published : OptionalArgument Bool
    , solutionsIds : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , solutions : OptionalArgument (List ChallengesolutionsSolution)
    }


{-| Type alias for the `SolutionchallengeChallenge` attributes. Note that this type
needs to use the `SolutionchallengeChallenge` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias SolutionchallengeChallengeRaw =
    { activeFrom : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , answer : String
    , discussionUrl : OptionalArgument String
    , markdown : String
    , markup : String
    , notes : OptionalArgument String
    , published : OptionalArgument Bool
    , title : String
    , solutionsIds : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , solutions : OptionalArgument (List ChallengesolutionsSolution)
    }


{-| Type for the SolutionchallengeChallenge input object.
-}
type SolutionchallengeChallenge
    = SolutionchallengeChallenge SolutionchallengeChallengeRaw


{-| Encode a SolutionchallengeChallenge into a value that can be used as an argument.
-}
encodeSolutionchallengeChallenge : SolutionchallengeChallenge -> Value
encodeSolutionchallengeChallenge (SolutionchallengeChallenge input) =
    Encode.maybeObject
        [ ( "activeFrom", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom ), ( "activeTo", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo ), ( "answer", Encode.string input.answer |> Just ), ( "discussionUrl", Encode.string |> Encode.optional input.discussionUrl ), ( "markdown", Encode.string input.markdown |> Just ), ( "markup", Encode.string input.markup |> Just ), ( "notes", Encode.string |> Encode.optional input.notes ), ( "published", Encode.bool |> Encode.optional input.published ), ( "title", Encode.string input.title |> Just ), ( "solutionsIds", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.solutionsIds ), ( "solutions", (encodeChallengesolutionsSolution |> Encode.list) |> Encode.optional input.solutions ) ]


buildSolutionuserUser : (SolutionuserUserOptionalFields -> SolutionuserUserOptionalFields) -> SolutionuserUser
buildSolutionuserUser fillOptionals =
    let
        optionals =
            fillOptionals
                { auth0UserId = Absent, email = Absent, role = Absent, solutionsIds = Absent, solutions = Absent }
    in
    SolutionuserUser { auth0UserId = optionals.auth0UserId, email = optionals.email, role = optionals.role, solutionsIds = optionals.solutionsIds, solutions = optionals.solutions }


type alias SolutionuserUserOptionalFields =
    { auth0UserId : OptionalArgument String
    , email : OptionalArgument String
    , role : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , solutionsIds : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , solutions : OptionalArgument (List UsersolutionsSolution)
    }


{-| Type alias for the `SolutionuserUser` attributes. Note that this type
needs to use the `SolutionuserUser` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias SolutionuserUserRaw =
    { auth0UserId : OptionalArgument String
    , email : OptionalArgument String
    , role : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , solutionsIds : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , solutions : OptionalArgument (List UsersolutionsSolution)
    }


{-| Type for the SolutionuserUser input object.
-}
type SolutionuserUser
    = SolutionuserUser SolutionuserUserRaw


{-| Encode a SolutionuserUser into a value that can be used as an argument.
-}
encodeSolutionuserUser : SolutionuserUser -> Value
encodeSolutionuserUser (SolutionuserUser input) =
    Encode.maybeObject
        [ ( "auth0UserId", Encode.string |> Encode.optional input.auth0UserId ), ( "email", Encode.string |> Encode.optional input.email ), ( "role", Encode.enum Graphcool.Enum.UserRole.toString |> Encode.optional input.role ), ( "solutionsIds", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.solutionsIds ), ( "solutions", (encodeUsersolutionsSolution |> Encode.list) |> Encode.optional input.solutions ) ]


buildUpdateChallenge : UpdateChallengeRequiredFields -> (UpdateChallengeOptionalFields -> UpdateChallengeOptionalFields) -> UpdateChallenge
buildUpdateChallenge required fillOptionals =
    let
        optionals =
            fillOptionals
                { activeFrom = Absent, activeTo = Absent, answer = Absent, discussionUrl = Absent, markdown = Absent, markup = Absent, notes = Absent, published = Absent, title = Absent, solutionsIds = Absent, solutions = Absent }
    in
    UpdateChallenge { activeFrom = optionals.activeFrom, activeTo = optionals.activeTo, answer = optionals.answer, discussionUrl = optionals.discussionUrl, id = required.id, markdown = optionals.markdown, markup = optionals.markup, notes = optionals.notes, published = optionals.published, title = optionals.title, solutionsIds = optionals.solutionsIds, solutions = optionals.solutions }


type alias UpdateChallengeRequiredFields =
    { id : Graphcool.ScalarCodecs.Id }


type alias UpdateChallengeOptionalFields =
    { activeFrom : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , answer : OptionalArgument String
    , discussionUrl : OptionalArgument String
    , markdown : OptionalArgument String
    , markup : OptionalArgument String
    , notes : OptionalArgument String
    , published : OptionalArgument Bool
    , title : OptionalArgument String
    , solutionsIds : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , solutions : OptionalArgument (List ChallengesolutionsSolution)
    }


{-| Type alias for the `UpdateChallenge` attributes. Note that this type
needs to use the `UpdateChallenge` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias UpdateChallengeRaw =
    { activeFrom : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , activeTo : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , answer : OptionalArgument String
    , discussionUrl : OptionalArgument String
    , id : Graphcool.ScalarCodecs.Id
    , markdown : OptionalArgument String
    , markup : OptionalArgument String
    , notes : OptionalArgument String
    , published : OptionalArgument Bool
    , title : OptionalArgument String
    , solutionsIds : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , solutions : OptionalArgument (List ChallengesolutionsSolution)
    }


{-| Type for the UpdateChallenge input object.
-}
type UpdateChallenge
    = UpdateChallenge UpdateChallengeRaw


{-| Encode a UpdateChallenge into a value that can be used as an argument.
-}
encodeUpdateChallenge : UpdateChallenge -> Value
encodeUpdateChallenge (UpdateChallenge input) =
    Encode.maybeObject
        [ ( "activeFrom", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeFrom ), ( "activeTo", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.activeTo ), ( "answer", Encode.string |> Encode.optional input.answer ), ( "discussionUrl", Encode.string |> Encode.optional input.discussionUrl ), ( "id", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "markdown", Encode.string |> Encode.optional input.markdown ), ( "markup", Encode.string |> Encode.optional input.markup ), ( "notes", Encode.string |> Encode.optional input.notes ), ( "published", Encode.bool |> Encode.optional input.published ), ( "title", Encode.string |> Encode.optional input.title ), ( "solutionsIds", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.solutionsIds ), ( "solutions", (encodeChallengesolutionsSolution |> Encode.list) |> Encode.optional input.solutions ) ]


buildUpdateSolution : UpdateSolutionRequiredFields -> (UpdateSolutionOptionalFields -> UpdateSolutionOptionalFields) -> UpdateSolution
buildUpdateSolution required fillOptionals =
    let
        optionals =
            fillOptionals
                { attempts = Absent, solved = Absent, challengeId = Absent, challenge = Absent, userId = Absent, user = Absent }
    in
    UpdateSolution { attempts = optionals.attempts, id = required.id, solved = optionals.solved, challengeId = optionals.challengeId, challenge = optionals.challenge, userId = optionals.userId, user = optionals.user }


type alias UpdateSolutionRequiredFields =
    { id : Graphcool.ScalarCodecs.Id }


type alias UpdateSolutionOptionalFields =
    { attempts : OptionalArgument Int
    , solved : OptionalArgument Bool
    , challengeId : OptionalArgument Graphcool.ScalarCodecs.Id
    , challenge : OptionalArgument SolutionchallengeChallenge
    , userId : OptionalArgument Graphcool.ScalarCodecs.Id
    , user : OptionalArgument SolutionuserUser
    }


{-| Type alias for the `UpdateSolution` attributes. Note that this type
needs to use the `UpdateSolution` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias UpdateSolutionRaw =
    { attempts : OptionalArgument Int
    , id : Graphcool.ScalarCodecs.Id
    , solved : OptionalArgument Bool
    , challengeId : OptionalArgument Graphcool.ScalarCodecs.Id
    , challenge : OptionalArgument SolutionchallengeChallenge
    , userId : OptionalArgument Graphcool.ScalarCodecs.Id
    , user : OptionalArgument SolutionuserUser
    }


{-| Type for the UpdateSolution input object.
-}
type UpdateSolution
    = UpdateSolution UpdateSolutionRaw


{-| Encode a UpdateSolution into a value that can be used as an argument.
-}
encodeUpdateSolution : UpdateSolution -> Value
encodeUpdateSolution (UpdateSolution input) =
    Encode.maybeObject
        [ ( "attempts", Encode.int |> Encode.optional input.attempts ), ( "id", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "solved", Encode.bool |> Encode.optional input.solved ), ( "challengeId", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.challengeId ), ( "challenge", encodeSolutionchallengeChallenge |> Encode.optional input.challenge ), ( "userId", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.userId ), ( "user", encodeSolutionuserUser |> Encode.optional input.user ) ]


buildUpdateUser : UpdateUserRequiredFields -> (UpdateUserOptionalFields -> UpdateUserOptionalFields) -> UpdateUser
buildUpdateUser required fillOptionals =
    let
        optionals =
            fillOptionals
                { auth0UserId = Absent, email = Absent, role = Absent, solutionsIds = Absent, solutions = Absent }
    in
    UpdateUser { auth0UserId = optionals.auth0UserId, email = optionals.email, id = required.id, role = optionals.role, solutionsIds = optionals.solutionsIds, solutions = optionals.solutions }


type alias UpdateUserRequiredFields =
    { id : Graphcool.ScalarCodecs.Id }


type alias UpdateUserOptionalFields =
    { auth0UserId : OptionalArgument String
    , email : OptionalArgument String
    , role : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , solutionsIds : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , solutions : OptionalArgument (List UsersolutionsSolution)
    }


{-| Type alias for the `UpdateUser` attributes. Note that this type
needs to use the `UpdateUser` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias UpdateUserRaw =
    { auth0UserId : OptionalArgument String
    , email : OptionalArgument String
    , id : Graphcool.ScalarCodecs.Id
    , role : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , solutionsIds : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , solutions : OptionalArgument (List UsersolutionsSolution)
    }


{-| Type for the UpdateUser input object.
-}
type UpdateUser
    = UpdateUser UpdateUserRaw


{-| Encode a UpdateUser into a value that can be used as an argument.
-}
encodeUpdateUser : UpdateUser -> Value
encodeUpdateUser (UpdateUser input) =
    Encode.maybeObject
        [ ( "auth0UserId", Encode.string |> Encode.optional input.auth0UserId ), ( "email", Encode.string |> Encode.optional input.email ), ( "id", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "role", Encode.enum Graphcool.Enum.UserRole.toString |> Encode.optional input.role ), ( "solutionsIds", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.solutionsIds ), ( "solutions", (encodeUsersolutionsSolution |> Encode.list) |> Encode.optional input.solutions ) ]


buildUserFilter : (UserFilterOptionalFields -> UserFilterOptionalFields) -> UserFilter
buildUserFilter fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, auth0UserId = Absent, auth0UserId_not = Absent, auth0UserId_in = Absent, auth0UserId_not_in = Absent, auth0UserId_lt = Absent, auth0UserId_lte = Absent, auth0UserId_gt = Absent, auth0UserId_gte = Absent, auth0UserId_contains = Absent, auth0UserId_not_contains = Absent, auth0UserId_starts_with = Absent, auth0UserId_not_starts_with = Absent, auth0UserId_ends_with = Absent, auth0UserId_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, email = Absent, email_not = Absent, email_in = Absent, email_not_in = Absent, email_lt = Absent, email_lte = Absent, email_gt = Absent, email_gte = Absent, email_contains = Absent, email_not_contains = Absent, email_starts_with = Absent, email_not_starts_with = Absent, email_ends_with = Absent, email_not_ends_with = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, role = Absent, role_not = Absent, role_in = Absent, role_not_in = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, solutions_every = Absent, solutions_some = Absent, solutions_none = Absent }
    in
    UserFilter { and = optionals.and, or = optionals.or, auth0UserId = optionals.auth0UserId, auth0UserId_not = optionals.auth0UserId_not, auth0UserId_in = optionals.auth0UserId_in, auth0UserId_not_in = optionals.auth0UserId_not_in, auth0UserId_lt = optionals.auth0UserId_lt, auth0UserId_lte = optionals.auth0UserId_lte, auth0UserId_gt = optionals.auth0UserId_gt, auth0UserId_gte = optionals.auth0UserId_gte, auth0UserId_contains = optionals.auth0UserId_contains, auth0UserId_not_contains = optionals.auth0UserId_not_contains, auth0UserId_starts_with = optionals.auth0UserId_starts_with, auth0UserId_not_starts_with = optionals.auth0UserId_not_starts_with, auth0UserId_ends_with = optionals.auth0UserId_ends_with, auth0UserId_not_ends_with = optionals.auth0UserId_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, email = optionals.email, email_not = optionals.email_not, email_in = optionals.email_in, email_not_in = optionals.email_not_in, email_lt = optionals.email_lt, email_lte = optionals.email_lte, email_gt = optionals.email_gt, email_gte = optionals.email_gte, email_contains = optionals.email_contains, email_not_contains = optionals.email_not_contains, email_starts_with = optionals.email_starts_with, email_not_starts_with = optionals.email_not_starts_with, email_ends_with = optionals.email_ends_with, email_not_ends_with = optionals.email_not_ends_with, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, role = optionals.role, role_not = optionals.role_not, role_in = optionals.role_in, role_not_in = optionals.role_not_in, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, solutions_every = optionals.solutions_every, solutions_some = optionals.solutions_some, solutions_none = optionals.solutions_none }


type alias UserFilterOptionalFields =
    { and : OptionalArgument (List UserFilter)
    , or : OptionalArgument (List UserFilter)
    , auth0UserId : OptionalArgument String
    , auth0UserId_not : OptionalArgument String
    , auth0UserId_in : OptionalArgument (List String)
    , auth0UserId_not_in : OptionalArgument (List String)
    , auth0UserId_lt : OptionalArgument String
    , auth0UserId_lte : OptionalArgument String
    , auth0UserId_gt : OptionalArgument String
    , auth0UserId_gte : OptionalArgument String
    , auth0UserId_contains : OptionalArgument String
    , auth0UserId_not_contains : OptionalArgument String
    , auth0UserId_starts_with : OptionalArgument String
    , auth0UserId_not_starts_with : OptionalArgument String
    , auth0UserId_ends_with : OptionalArgument String
    , auth0UserId_not_ends_with : OptionalArgument String
    , createdAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , email : OptionalArgument String
    , email_not : OptionalArgument String
    , email_in : OptionalArgument (List String)
    , email_not_in : OptionalArgument (List String)
    , email_lt : OptionalArgument String
    , email_lte : OptionalArgument String
    , email_gt : OptionalArgument String
    , email_gte : OptionalArgument String
    , email_contains : OptionalArgument String
    , email_not_contains : OptionalArgument String
    , email_starts_with : OptionalArgument String
    , email_not_starts_with : OptionalArgument String
    , email_ends_with : OptionalArgument String
    , email_not_ends_with : OptionalArgument String
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_not_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_lt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_lte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , role : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , role_not : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , role_in : OptionalArgument (List Graphcool.Enum.UserRole.UserRole)
    , role_not_in : OptionalArgument (List Graphcool.Enum.UserRole.UserRole)
    , updatedAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , solutions_every : OptionalArgument SolutionFilter
    , solutions_some : OptionalArgument SolutionFilter
    , solutions_none : OptionalArgument SolutionFilter
    }


{-| Type alias for the `UserFilter` attributes. Note that this type
needs to use the `UserFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias UserFilterRaw =
    { and : OptionalArgument (List UserFilter)
    , or : OptionalArgument (List UserFilter)
    , auth0UserId : OptionalArgument String
    , auth0UserId_not : OptionalArgument String
    , auth0UserId_in : OptionalArgument (List String)
    , auth0UserId_not_in : OptionalArgument (List String)
    , auth0UserId_lt : OptionalArgument String
    , auth0UserId_lte : OptionalArgument String
    , auth0UserId_gt : OptionalArgument String
    , auth0UserId_gte : OptionalArgument String
    , auth0UserId_contains : OptionalArgument String
    , auth0UserId_not_contains : OptionalArgument String
    , auth0UserId_starts_with : OptionalArgument String
    , auth0UserId_not_starts_with : OptionalArgument String
    , auth0UserId_ends_with : OptionalArgument String
    , auth0UserId_not_ends_with : OptionalArgument String
    , createdAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , email : OptionalArgument String
    , email_not : OptionalArgument String
    , email_in : OptionalArgument (List String)
    , email_not_in : OptionalArgument (List String)
    , email_lt : OptionalArgument String
    , email_lte : OptionalArgument String
    , email_gt : OptionalArgument String
    , email_gte : OptionalArgument String
    , email_contains : OptionalArgument String
    , email_not_contains : OptionalArgument String
    , email_starts_with : OptionalArgument String
    , email_not_starts_with : OptionalArgument String
    , email_ends_with : OptionalArgument String
    , email_not_ends_with : OptionalArgument String
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_not_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_lt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_lte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , role : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , role_not : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , role_in : OptionalArgument (List Graphcool.Enum.UserRole.UserRole)
    , role_not_in : OptionalArgument (List Graphcool.Enum.UserRole.UserRole)
    , updatedAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , solutions_every : OptionalArgument SolutionFilter
    , solutions_some : OptionalArgument SolutionFilter
    , solutions_none : OptionalArgument SolutionFilter
    }


{-| Type for the UserFilter input object.
-}
type UserFilter
    = UserFilter UserFilterRaw


{-| Encode a UserFilter into a value that can be used as an argument.
-}
encodeUserFilter : UserFilter -> Value
encodeUserFilter (UserFilter input) =
    Encode.maybeObject
        [ ( "AND", (encodeUserFilter |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeUserFilter |> Encode.list) |> Encode.optional input.or ), ( "auth0UserId", Encode.string |> Encode.optional input.auth0UserId ), ( "auth0UserId_not", Encode.string |> Encode.optional input.auth0UserId_not ), ( "auth0UserId_in", (Encode.string |> Encode.list) |> Encode.optional input.auth0UserId_in ), ( "auth0UserId_not_in", (Encode.string |> Encode.list) |> Encode.optional input.auth0UserId_not_in ), ( "auth0UserId_lt", Encode.string |> Encode.optional input.auth0UserId_lt ), ( "auth0UserId_lte", Encode.string |> Encode.optional input.auth0UserId_lte ), ( "auth0UserId_gt", Encode.string |> Encode.optional input.auth0UserId_gt ), ( "auth0UserId_gte", Encode.string |> Encode.optional input.auth0UserId_gte ), ( "auth0UserId_contains", Encode.string |> Encode.optional input.auth0UserId_contains ), ( "auth0UserId_not_contains", Encode.string |> Encode.optional input.auth0UserId_not_contains ), ( "auth0UserId_starts_with", Encode.string |> Encode.optional input.auth0UserId_starts_with ), ( "auth0UserId_not_starts_with", Encode.string |> Encode.optional input.auth0UserId_not_starts_with ), ( "auth0UserId_ends_with", Encode.string |> Encode.optional input.auth0UserId_ends_with ), ( "auth0UserId_not_ends_with", Encode.string |> Encode.optional input.auth0UserId_not_ends_with ), ( "createdAt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt ), ( "createdAt_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_gte ), ( "email", Encode.string |> Encode.optional input.email ), ( "email_not", Encode.string |> Encode.optional input.email_not ), ( "email_in", (Encode.string |> Encode.list) |> Encode.optional input.email_in ), ( "email_not_in", (Encode.string |> Encode.list) |> Encode.optional input.email_not_in ), ( "email_lt", Encode.string |> Encode.optional input.email_lt ), ( "email_lte", Encode.string |> Encode.optional input.email_lte ), ( "email_gt", Encode.string |> Encode.optional input.email_gt ), ( "email_gte", Encode.string |> Encode.optional input.email_gte ), ( "email_contains", Encode.string |> Encode.optional input.email_contains ), ( "email_not_contains", Encode.string |> Encode.optional input.email_not_contains ), ( "email_starts_with", Encode.string |> Encode.optional input.email_starts_with ), ( "email_not_starts_with", Encode.string |> Encode.optional input.email_not_starts_with ), ( "email_ends_with", Encode.string |> Encode.optional input.email_ends_with ), ( "email_not_ends_with", Encode.string |> Encode.optional input.email_not_ends_with ), ( "id", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "id_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not ), ( "id_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_lt ), ( "id_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_lte ), ( "id_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_gt ), ( "id_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_gte ), ( "id_contains", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_contains ), ( "id_not_contains", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_ends_with ), ( "role", Encode.enum Graphcool.Enum.UserRole.toString |> Encode.optional input.role ), ( "role_not", Encode.enum Graphcool.Enum.UserRole.toString |> Encode.optional input.role_not ), ( "role_in", (Encode.enum Graphcool.Enum.UserRole.toString |> Encode.list) |> Encode.optional input.role_in ), ( "role_not_in", (Encode.enum Graphcool.Enum.UserRole.toString |> Encode.list) |> Encode.optional input.role_not_in ), ( "updatedAt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_gte ), ( "solutions_every", encodeSolutionFilter |> Encode.optional input.solutions_every ), ( "solutions_some", encodeSolutionFilter |> Encode.optional input.solutions_some ), ( "solutions_none", encodeSolutionFilter |> Encode.optional input.solutions_none ) ]


buildUserSubscriptionFilter : (UserSubscriptionFilterOptionalFields -> UserSubscriptionFilterOptionalFields) -> UserSubscriptionFilter
buildUserSubscriptionFilter fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    UserSubscriptionFilter { and = optionals.and, or = optionals.or, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias UserSubscriptionFilterOptionalFields =
    { and : OptionalArgument (List UserSubscriptionFilter)
    , or : OptionalArgument (List UserSubscriptionFilter)
    , mutation_in : OptionalArgument (List Graphcool.Enum.ModelMutationType_.ModelMutationType_)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument UserSubscriptionFilterNode
    }


{-| Type alias for the `UserSubscriptionFilter` attributes. Note that this type
needs to use the `UserSubscriptionFilter` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias UserSubscriptionFilterRaw =
    { and : OptionalArgument (List UserSubscriptionFilter)
    , or : OptionalArgument (List UserSubscriptionFilter)
    , mutation_in : OptionalArgument (List Graphcool.Enum.ModelMutationType_.ModelMutationType_)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument UserSubscriptionFilterNode
    }


{-| Type for the UserSubscriptionFilter input object.
-}
type UserSubscriptionFilter
    = UserSubscriptionFilter UserSubscriptionFilterRaw


{-| Encode a UserSubscriptionFilter into a value that can be used as an argument.
-}
encodeUserSubscriptionFilter : UserSubscriptionFilter -> Value
encodeUserSubscriptionFilter (UserSubscriptionFilter input) =
    Encode.maybeObject
        [ ( "AND", (encodeUserSubscriptionFilter |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeUserSubscriptionFilter |> Encode.list) |> Encode.optional input.or ), ( "mutation_in", (Encode.enum Graphcool.Enum.ModelMutationType_.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeUserSubscriptionFilterNode |> Encode.optional input.node ) ]


buildUserSubscriptionFilterNode : (UserSubscriptionFilterNodeOptionalFields -> UserSubscriptionFilterNodeOptionalFields) -> UserSubscriptionFilterNode
buildUserSubscriptionFilterNode fillOptionals =
    let
        optionals =
            fillOptionals
                { auth0UserId = Absent, auth0UserId_not = Absent, auth0UserId_in = Absent, auth0UserId_not_in = Absent, auth0UserId_lt = Absent, auth0UserId_lte = Absent, auth0UserId_gt = Absent, auth0UserId_gte = Absent, auth0UserId_contains = Absent, auth0UserId_not_contains = Absent, auth0UserId_starts_with = Absent, auth0UserId_not_starts_with = Absent, auth0UserId_ends_with = Absent, auth0UserId_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, email = Absent, email_not = Absent, email_in = Absent, email_not_in = Absent, email_lt = Absent, email_lte = Absent, email_gt = Absent, email_gte = Absent, email_contains = Absent, email_not_contains = Absent, email_starts_with = Absent, email_not_starts_with = Absent, email_ends_with = Absent, email_not_ends_with = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, role = Absent, role_not = Absent, role_in = Absent, role_not_in = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, solutions_every = Absent, solutions_some = Absent, solutions_none = Absent }
    in
    UserSubscriptionFilterNode { auth0UserId = optionals.auth0UserId, auth0UserId_not = optionals.auth0UserId_not, auth0UserId_in = optionals.auth0UserId_in, auth0UserId_not_in = optionals.auth0UserId_not_in, auth0UserId_lt = optionals.auth0UserId_lt, auth0UserId_lte = optionals.auth0UserId_lte, auth0UserId_gt = optionals.auth0UserId_gt, auth0UserId_gte = optionals.auth0UserId_gte, auth0UserId_contains = optionals.auth0UserId_contains, auth0UserId_not_contains = optionals.auth0UserId_not_contains, auth0UserId_starts_with = optionals.auth0UserId_starts_with, auth0UserId_not_starts_with = optionals.auth0UserId_not_starts_with, auth0UserId_ends_with = optionals.auth0UserId_ends_with, auth0UserId_not_ends_with = optionals.auth0UserId_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, email = optionals.email, email_not = optionals.email_not, email_in = optionals.email_in, email_not_in = optionals.email_not_in, email_lt = optionals.email_lt, email_lte = optionals.email_lte, email_gt = optionals.email_gt, email_gte = optionals.email_gte, email_contains = optionals.email_contains, email_not_contains = optionals.email_not_contains, email_starts_with = optionals.email_starts_with, email_not_starts_with = optionals.email_not_starts_with, email_ends_with = optionals.email_ends_with, email_not_ends_with = optionals.email_not_ends_with, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, role = optionals.role, role_not = optionals.role_not, role_in = optionals.role_in, role_not_in = optionals.role_not_in, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, solutions_every = optionals.solutions_every, solutions_some = optionals.solutions_some, solutions_none = optionals.solutions_none }


type alias UserSubscriptionFilterNodeOptionalFields =
    { auth0UserId : OptionalArgument String
    , auth0UserId_not : OptionalArgument String
    , auth0UserId_in : OptionalArgument (List String)
    , auth0UserId_not_in : OptionalArgument (List String)
    , auth0UserId_lt : OptionalArgument String
    , auth0UserId_lte : OptionalArgument String
    , auth0UserId_gt : OptionalArgument String
    , auth0UserId_gte : OptionalArgument String
    , auth0UserId_contains : OptionalArgument String
    , auth0UserId_not_contains : OptionalArgument String
    , auth0UserId_starts_with : OptionalArgument String
    , auth0UserId_not_starts_with : OptionalArgument String
    , auth0UserId_ends_with : OptionalArgument String
    , auth0UserId_not_ends_with : OptionalArgument String
    , createdAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , email : OptionalArgument String
    , email_not : OptionalArgument String
    , email_in : OptionalArgument (List String)
    , email_not_in : OptionalArgument (List String)
    , email_lt : OptionalArgument String
    , email_lte : OptionalArgument String
    , email_gt : OptionalArgument String
    , email_gte : OptionalArgument String
    , email_contains : OptionalArgument String
    , email_not_contains : OptionalArgument String
    , email_starts_with : OptionalArgument String
    , email_not_starts_with : OptionalArgument String
    , email_ends_with : OptionalArgument String
    , email_not_ends_with : OptionalArgument String
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_not_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_lt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_lte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , role : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , role_not : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , role_in : OptionalArgument (List Graphcool.Enum.UserRole.UserRole)
    , role_not_in : OptionalArgument (List Graphcool.Enum.UserRole.UserRole)
    , updatedAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , solutions_every : OptionalArgument SolutionFilter
    , solutions_some : OptionalArgument SolutionFilter
    , solutions_none : OptionalArgument SolutionFilter
    }


{-| Type alias for the `UserSubscriptionFilterNode` attributes. Note that this type
needs to use the `UserSubscriptionFilterNode` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias UserSubscriptionFilterNodeRaw =
    { auth0UserId : OptionalArgument String
    , auth0UserId_not : OptionalArgument String
    , auth0UserId_in : OptionalArgument (List String)
    , auth0UserId_not_in : OptionalArgument (List String)
    , auth0UserId_lt : OptionalArgument String
    , auth0UserId_lte : OptionalArgument String
    , auth0UserId_gt : OptionalArgument String
    , auth0UserId_gte : OptionalArgument String
    , auth0UserId_contains : OptionalArgument String
    , auth0UserId_not_contains : OptionalArgument String
    , auth0UserId_starts_with : OptionalArgument String
    , auth0UserId_not_starts_with : OptionalArgument String
    , auth0UserId_ends_with : OptionalArgument String
    , auth0UserId_not_ends_with : OptionalArgument String
    , createdAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , createdAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , createdAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , email : OptionalArgument String
    , email_not : OptionalArgument String
    , email_in : OptionalArgument (List String)
    , email_not_in : OptionalArgument (List String)
    , email_lt : OptionalArgument String
    , email_lte : OptionalArgument String
    , email_gt : OptionalArgument String
    , email_gte : OptionalArgument String
    , email_contains : OptionalArgument String
    , email_not_contains : OptionalArgument String
    , email_starts_with : OptionalArgument String
    , email_not_starts_with : OptionalArgument String
    , email_ends_with : OptionalArgument String
    , email_not_ends_with : OptionalArgument String
    , id : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_not_in : OptionalArgument (List Graphcool.ScalarCodecs.Id)
    , id_lt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_lte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gt : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_gte : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_contains : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_starts_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , id_not_ends_with : OptionalArgument Graphcool.ScalarCodecs.Id
    , role : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , role_not : OptionalArgument Graphcool.Enum.UserRole.UserRole
    , role_in : OptionalArgument (List Graphcool.Enum.UserRole.UserRole)
    , role_not_in : OptionalArgument (List Graphcool.Enum.UserRole.UserRole)
    , updatedAt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_not : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_not_in : OptionalArgument (List Graphcool.ScalarCodecs.DateTime)
    , updatedAt_lt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_lte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gt : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , updatedAt_gte : OptionalArgument Graphcool.ScalarCodecs.DateTime
    , solutions_every : OptionalArgument SolutionFilter
    , solutions_some : OptionalArgument SolutionFilter
    , solutions_none : OptionalArgument SolutionFilter
    }


{-| Type for the UserSubscriptionFilterNode input object.
-}
type UserSubscriptionFilterNode
    = UserSubscriptionFilterNode UserSubscriptionFilterNodeRaw


{-| Encode a UserSubscriptionFilterNode into a value that can be used as an argument.
-}
encodeUserSubscriptionFilterNode : UserSubscriptionFilterNode -> Value
encodeUserSubscriptionFilterNode (UserSubscriptionFilterNode input) =
    Encode.maybeObject
        [ ( "auth0UserId", Encode.string |> Encode.optional input.auth0UserId ), ( "auth0UserId_not", Encode.string |> Encode.optional input.auth0UserId_not ), ( "auth0UserId_in", (Encode.string |> Encode.list) |> Encode.optional input.auth0UserId_in ), ( "auth0UserId_not_in", (Encode.string |> Encode.list) |> Encode.optional input.auth0UserId_not_in ), ( "auth0UserId_lt", Encode.string |> Encode.optional input.auth0UserId_lt ), ( "auth0UserId_lte", Encode.string |> Encode.optional input.auth0UserId_lte ), ( "auth0UserId_gt", Encode.string |> Encode.optional input.auth0UserId_gt ), ( "auth0UserId_gte", Encode.string |> Encode.optional input.auth0UserId_gte ), ( "auth0UserId_contains", Encode.string |> Encode.optional input.auth0UserId_contains ), ( "auth0UserId_not_contains", Encode.string |> Encode.optional input.auth0UserId_not_contains ), ( "auth0UserId_starts_with", Encode.string |> Encode.optional input.auth0UserId_starts_with ), ( "auth0UserId_not_starts_with", Encode.string |> Encode.optional input.auth0UserId_not_starts_with ), ( "auth0UserId_ends_with", Encode.string |> Encode.optional input.auth0UserId_ends_with ), ( "auth0UserId_not_ends_with", Encode.string |> Encode.optional input.auth0UserId_not_ends_with ), ( "createdAt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt ), ( "createdAt_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt_gte ), ( "email", Encode.string |> Encode.optional input.email ), ( "email_not", Encode.string |> Encode.optional input.email_not ), ( "email_in", (Encode.string |> Encode.list) |> Encode.optional input.email_in ), ( "email_not_in", (Encode.string |> Encode.list) |> Encode.optional input.email_not_in ), ( "email_lt", Encode.string |> Encode.optional input.email_lt ), ( "email_lte", Encode.string |> Encode.optional input.email_lte ), ( "email_gt", Encode.string |> Encode.optional input.email_gt ), ( "email_gte", Encode.string |> Encode.optional input.email_gte ), ( "email_contains", Encode.string |> Encode.optional input.email_contains ), ( "email_not_contains", Encode.string |> Encode.optional input.email_not_contains ), ( "email_starts_with", Encode.string |> Encode.optional input.email_starts_with ), ( "email_not_starts_with", Encode.string |> Encode.optional input.email_not_starts_with ), ( "email_ends_with", Encode.string |> Encode.optional input.email_ends_with ), ( "email_not_ends_with", Encode.string |> Encode.optional input.email_not_ends_with ), ( "id", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "id_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not ), ( "id_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_lt ), ( "id_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_lte ), ( "id_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_gt ), ( "id_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_gte ), ( "id_contains", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_contains ), ( "id_not_contains", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id_not_ends_with ), ( "role", Encode.enum Graphcool.Enum.UserRole.toString |> Encode.optional input.role ), ( "role_not", Encode.enum Graphcool.Enum.UserRole.toString |> Encode.optional input.role_not ), ( "role_in", (Encode.enum Graphcool.Enum.UserRole.toString |> Encode.list) |> Encode.optional input.role_in ), ( "role_not_in", (Encode.enum Graphcool.Enum.UserRole.toString |> Encode.list) |> Encode.optional input.role_not_in ), ( "updatedAt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.updatedAt_gte ), ( "solutions_every", encodeSolutionFilter |> Encode.optional input.solutions_every ), ( "solutions_some", encodeSolutionFilter |> Encode.optional input.solutions_some ), ( "solutions_none", encodeSolutionFilter |> Encode.optional input.solutions_none ) ]


buildUsersolutionsSolution : UsersolutionsSolutionRequiredFields -> (UsersolutionsSolutionOptionalFields -> UsersolutionsSolutionOptionalFields) -> UsersolutionsSolution
buildUsersolutionsSolution required fillOptionals =
    let
        optionals =
            fillOptionals
                { attempts = Absent, challengeId = Absent, challenge = Absent }
    in
    UsersolutionsSolution { attempts = optionals.attempts, solved = required.solved, challengeId = optionals.challengeId, challenge = optionals.challenge }


type alias UsersolutionsSolutionRequiredFields =
    { solved : Bool }


type alias UsersolutionsSolutionOptionalFields =
    { attempts : OptionalArgument Int
    , challengeId : OptionalArgument Graphcool.ScalarCodecs.Id
    , challenge : OptionalArgument SolutionchallengeChallenge
    }


{-| Type alias for the `UsersolutionsSolution` attributes. Note that this type
needs to use the `UsersolutionsSolution` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias UsersolutionsSolutionRaw =
    { attempts : OptionalArgument Int
    , solved : Bool
    , challengeId : OptionalArgument Graphcool.ScalarCodecs.Id
    , challenge : OptionalArgument SolutionchallengeChallenge
    }


{-| Type for the UsersolutionsSolution input object.
-}
type UsersolutionsSolution
    = UsersolutionsSolution UsersolutionsSolutionRaw


{-| Encode a UsersolutionsSolution into a value that can be used as an argument.
-}
encodeUsersolutionsSolution : UsersolutionsSolution -> Value
encodeUsersolutionsSolution (UsersolutionsSolution input) =
    Encode.maybeObject
        [ ( "attempts", Encode.int |> Encode.optional input.attempts ), ( "solved", Encode.bool input.solved |> Just ), ( "challengeId", (Graphcool.ScalarCodecs.codecs |> Graphcool.Scalar.unwrapEncoder .codecId) |> Encode.optional input.challengeId ), ( "challenge", encodeSolutionchallengeChallenge |> Encode.optional input.challenge ) ]
